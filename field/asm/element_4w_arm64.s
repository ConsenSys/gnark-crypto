// Code generated by gnark-crypto/generator. DO NOT EDIT.
#include "textflag.h"
#include "funcdata.h"
#include "go_asm.h"

// add(res, x, y *Element)
TEXT ·add(SB), NOSPLIT, $0-24
	LDP  x+8(FP), (R12, R13)
	LDP  0(R12), (R8, R9)
	LDP  16(R12), (R10, R11)
	LDP  0(R13), (R4, R5)
	LDP  16(R13), (R6, R7)
	ADDS R8, R4, R4
	ADCS R9, R5, R5
	ADCS R10, R6, R6
	ADCS R11, R7, R7

	// load modulus and subtract
	LDP  ·qElement+0(SB), (R0, R1)
	LDP  ·qElement+16(SB), (R2, R3)
	SUBS R0, R4, R0
	SBCS R1, R5, R1
	SBCS R2, R6, R2
	SBCS R3, R7, R3

	// reduce if necessary
	CSEL CS, R0, R4, R4
	CSEL CS, R1, R5, R5
	CSEL CS, R2, R6, R6
	CSEL CS, R3, R7, R7

	// store
	MOVD res+0(FP), R14
	STP  (R4, R5), 0(R14)
	STP  (R6, R7), 16(R14)
	RET

// double(res, x *Element)
TEXT ·double(SB), NOSPLIT, $0-16
	LDP  res+0(FP), (R1, R0)
	LDP  0(R0), (R2, R3)
	LDP  16(R0), (R4, R5)
	ADDS R2, R2, R2
	ADCS R3, R3, R3
	ADCS R4, R4, R4
	ADCS R5, R5, R5

	// load modulus and subtract
	LDP  ·qElement+0(SB), (R6, R7)
	LDP  ·qElement+16(SB), (R8, R9)
	SUBS R6, R2, R6
	SBCS R7, R3, R7
	SBCS R8, R4, R8
	SBCS R9, R5, R9

	// reduce if necessary
	CSEL CS, R6, R2, R2
	CSEL CS, R7, R3, R3
	CSEL CS, R8, R4, R4
	CSEL CS, R9, R5, R5
	STP  (R2, R3), 0(R1)
	STP  (R4, R5), 16(R1)
	RET

// sub(res, x, y *Element)
TEXT ·sub(SB), NOSPLIT, $0-24
	LDP  x+8(FP), (R12, R13)
	LDP  0(R12), (R4, R5)
	LDP  16(R12), (R6, R7)
	LDP  0(R13), (R0, R1)
	LDP  16(R13), (R2, R3)
	SUBS R0, R4, R0
	SBCS R1, R5, R1
	SBCS R2, R6, R2
	SBCS R3, R7, R3

	// load modulus and select
	LDP  ·qElement+0(SB), (R8, R9)
	LDP  ·qElement+16(SB), (R10, R11)
	CSEL CS, ZR, R8, R8
	CSEL CS, ZR, R9, R9
	CSEL CS, ZR, R10, R10
	CSEL CS, ZR, R11, R11

	// add q if underflow, 0 if not
	ADDS R0, R8, R0
	ADCS R1, R9, R1
	ADCS R2, R10, R2
	ADCS R3, R11, R3
	MOVD res+0(FP), R14
	STP  (R0, R1), 0(R14)
	STP  (R2, R3), 16(R14)
	RET

// butterfly(x, y *Element)
TEXT ·Butterfly(SB), NOSPLIT, $0-16
	LDP  x+0(FP), (R16, R17)
	LDP  0(R16), (R0, R1)
	LDP  16(R16), (R2, R3)
	LDP  0(R17), (R4, R5)
	LDP  16(R17), (R6, R7)
	ADDS R0, R4, R8
	ADCS R1, R5, R9
	ADCS R2, R6, R10
	ADC  R3, R7, R11
	SUBS R4, R0, R4
	SBCS R5, R1, R5
	SBCS R6, R2, R6
	SBCS R7, R3, R7

	// load modulus and select
	LDP  ·qElement+0(SB), (R0, R1)
	CSEL CS, ZR, R0, R12
	CSEL CS, ZR, R1, R13
	LDP  ·qElement+16(SB), (R2, R3)
	CSEL CS, ZR, R2, R14
	CSEL CS, ZR, R3, R15

	// add q if underflow, 0 if not
	ADDS R4, R12, R4
	ADCS R5, R13, R5
	STP  (R4, R5), 0(R17)
	ADCS R6, R14, R6
	ADC  R7, R15, R7
	STP  (R6, R7), 16(R17)

	// load modulus and subtract
	SUBS R0, R8, R0
	SBCS R1, R9, R1
	SBCS R2, R10, R2
	SBCS R3, R11, R3

	// reduce if necessary
	CSEL CS, R0, R8, R8
	CSEL CS, R1, R9, R9
	STP  (R8, R9), 0(R16)
	CSEL CS, R2, R10, R10
	CSEL CS, R3, R11, R11
	STP  (R10, R11), 16(R16)
	RET

// mul(res, x, y *Element)
TEXT ·mul(SB), NOSPLIT, $0-24
#define DIVSHIFT() \
	MUL   R12, R17, R0 \
	ADDS  R0, R7, R7   \
	MUL   R13, R17, R0 \
	ADCS  R0, R8, R8   \
	MUL   R14, R17, R0 \
	ADCS  R0, R9, R9   \
	MUL   R15, R17, R0 \
	ADCS  R0, R10, R10 \
	ADC   ZR, R11, R11 \
	UMULH R12, R17, R0 \
	ADDS  R0, R8, R7   \
	UMULH R13, R17, R0 \
	ADCS  R0, R9, R8   \
	UMULH R14, R17, R0 \
	ADCS  R0, R10, R9  \
	UMULH R15, R17, R0 \
	ADCS  R0, R11, R10 \

#define MUL_WORD_N() \
	MUL   R3, R2, R0   \
	ADDS  R0, R7, R7   \
	MUL   R7, R16, R17 \
	MUL   R4, R2, R0   \
	ADCS  R0, R8, R8   \
	MUL   R5, R2, R0   \
	ADCS  R0, R9, R9   \
	MUL   R6, R2, R0   \
	ADCS  R0, R10, R10 \
	ADC   ZR, ZR, R11  \
	UMULH R3, R2, R0   \
	ADDS  R0, R8, R8   \
	UMULH R4, R2, R0   \
	ADCS  R0, R9, R9   \
	UMULH R5, R2, R0   \
	ADCS  R0, R10, R10 \
	UMULH R6, R2, R0   \
	ADC   R0, R11, R11 \
	DIVSHIFT()         \

#define MUL_WORD_0() \
	MUL   R3, R2, R7   \
	MUL   R4, R2, R8   \
	MUL   R5, R2, R9   \
	MUL   R6, R2, R10  \
	UMULH R3, R2, R0   \
	ADDS  R0, R8, R8   \
	UMULH R4, R2, R0   \
	ADCS  R0, R9, R9   \
	UMULH R5, R2, R0   \
	ADCS  R0, R10, R10 \
	UMULH R6, R2, R0   \
	ADC   R0, ZR, R11  \
	MUL   R7, R16, R17 \
	DIVSHIFT()         \

	// mul body
	MOVD y+16(FP), R1
	MOVD x+8(FP), R0
	LDP  0(R0), (R3, R4)
	LDP  16(R0), (R5, R6)
	MOVD 0(R1), R2
	MOVD $const_qInvNeg, R16
	LDP  ·qElement+0(SB), (R12, R13)
	LDP  ·qElement+16(SB), (R14, R15)
	MUL_WORD_0()
	MOVD 8(R1), R2
	MUL_WORD_N()
	MOVD 16(R1), R2
	MUL_WORD_N()
	MOVD 24(R1), R2
	MUL_WORD_N()

	// reduce if necessary
	SUBS R12, R7, R12
	SBCS R13, R8, R13
	SBCS R14, R9, R14
	SBCS R15, R10, R15
	MOVD res+0(FP), R0
	CSEL CS, R12, R7, R7
	CSEL CS, R13, R8, R8
	STP  (R7, R8), 0(R0)
	CSEL CS, R14, R9, R9
	CSEL CS, R15, R10, R10
	STP  (R9, R10), 16(R0)
	RET
