// Code generated by gnark-crypto/generator. DO NOT EDIT.
#include "textflag.h"
#include "funcdata.h"
#include "go_asm.h"

// butterfly(a, b *Element)
// a, b = a+b, a-b
TEXT ·Butterfly(SB), NOFRAME|NOSPLIT, $0-16
	LDP  x+0(FP), (R25, R26)
	LDP  0(R25), (R0, R1)
	LDP  16(R25), (R2, R3)
	LDP  32(R25), (R4, R5)
	LDP  0(R26), (R6, R7)
	LDP  16(R26), (R8, R9)
	LDP  32(R26), (R10, R11)
	ADDS R0, R6, R12
	ADCS R1, R7, R13
	ADCS R2, R8, R14
	ADCS R3, R9, R15
	ADCS R4, R10, R16
	ADC  R5, R11, R17
	SUBS R6, R0, R6
	SBCS R7, R1, R7
	SBCS R8, R2, R8
	SBCS R9, R3, R9
	SBCS R10, R4, R10
	SBCS R11, R5, R11
	LDP  ·qElement+0(SB), (R0, R1)
	CSEL CS, ZR, R0, R19
	CSEL CS, ZR, R1, R20
	LDP  ·qElement+16(SB), (R2, R3)
	CSEL CS, ZR, R2, R21
	CSEL CS, ZR, R3, R22
	LDP  ·qElement+32(SB), (R4, R5)
	CSEL CS, ZR, R4, R23
	CSEL CS, ZR, R5, R24

	// add q if underflow, 0 if not
	ADDS R6, R19, R6
	ADCS R7, R20, R7
	STP  (R6, R7), 0(R26)
	ADCS R8, R21, R8
	ADCS R9, R22, R9
	STP  (R8, R9), 16(R26)
	ADCS R10, R23, R10
	ADC  R11, R24, R11
	STP  (R10, R11), 32(R26)

	// q = t - q
	SUBS R0, R12, R0
	SBCS R1, R13, R1
	SBCS R2, R14, R2
	SBCS R3, R15, R3
	SBCS R4, R16, R4
	SBCS R5, R17, R5

	// if no borrow, return q, else return t
	CSEL CS, R0, R12, R12
	CSEL CS, R1, R13, R13
	STP  (R12, R13), 0(R25)
	CSEL CS, R2, R14, R14
	CSEL CS, R3, R15, R15
	STP  (R14, R15), 16(R25)
	CSEL CS, R4, R16, R16
	CSEL CS, R5, R17, R17
	STP  (R16, R17), 32(R25)
	RET

// mul(res, x, y *Element)
// Algorithm 2 of Faster Montgomery Multiplication and Multi-Scalar-Multiplication for SNARKS
// by Y. El Housni and G. Botrel https://doi.org/10.46586/tches.v2023.i3.504-521
TEXT ·mul(SB), NOFRAME|NOSPLIT, $0-24
#define DIVSHIFT() \
	MUL   R9, R24, R0  \
	ADDS  R0, R15, R15 \
	MUL   R10, R24, R0 \
	ADCS  R0, R16, R16 \
	MUL   R11, R24, R0 \
	ADCS  R0, R17, R17 \
	MUL   R12, R24, R0 \
	ADCS  R0, R19, R19 \
	MUL   R13, R24, R0 \
	ADCS  R0, R20, R20 \
	MUL   R14, R24, R0 \
	ADCS  R0, R21, R21 \
	ADC   R22, ZR, R22 \
	UMULH R9, R24, R0  \
	ADDS  R0, R16, R15 \
	UMULH R10, R24, R0 \
	ADCS  R0, R17, R16 \
	UMULH R11, R24, R0 \
	ADCS  R0, R19, R17 \
	UMULH R12, R24, R0 \
	ADCS  R0, R20, R19 \
	UMULH R13, R24, R0 \
	ADCS  R0, R21, R20 \
	UMULH R14, R24, R0 \
	ADCS  R0, R22, R21 \

#define MUL_WORD_N() \
	MUL   R3, R2, R0    \
	ADDS  R0, R15, R15  \
	MUL   R15, R23, R24 \
	MUL   R4, R2, R0    \
	ADCS  R0, R16, R16  \
	MUL   R5, R2, R0    \
	ADCS  R0, R17, R17  \
	MUL   R6, R2, R0    \
	ADCS  R0, R19, R19  \
	MUL   R7, R2, R0    \
	ADCS  R0, R20, R20  \
	MUL   R8, R2, R0    \
	ADCS  R0, R21, R21  \
	ADC   ZR, ZR, R22   \
	UMULH R3, R2, R0    \
	ADDS  R0, R16, R16  \
	UMULH R4, R2, R0    \
	ADCS  R0, R17, R17  \
	UMULH R5, R2, R0    \
	ADCS  R0, R19, R19  \
	UMULH R6, R2, R0    \
	ADCS  R0, R20, R20  \
	UMULH R7, R2, R0    \
	ADCS  R0, R21, R21  \
	UMULH R8, R2, R0    \
	ADC   R0, R22, R22  \
	DIVSHIFT()          \

#define MUL_WORD_0() \
	MUL   R3, R2, R15   \
	MUL   R4, R2, R16   \
	MUL   R5, R2, R17   \
	MUL   R6, R2, R19   \
	MUL   R7, R2, R20   \
	MUL   R8, R2, R21   \
	UMULH R3, R2, R0    \
	ADDS  R0, R16, R16  \
	UMULH R4, R2, R0    \
	ADCS  R0, R17, R17  \
	UMULH R5, R2, R0    \
	ADCS  R0, R19, R19  \
	UMULH R6, R2, R0    \
	ADCS  R0, R20, R20  \
	UMULH R7, R2, R0    \
	ADCS  R0, R21, R21  \
	UMULH R8, R2, R0    \
	ADC   R0, ZR, R22   \
	MUL   R15, R23, R24 \
	DIVSHIFT()          \

	MOVD y+16(FP), R1
	MOVD x+8(FP), R0
	LDP  0(R0), (R3, R4)
	LDP  16(R0), (R5, R6)
	LDP  32(R0), (R7, R8)
	MOVD 0(R1), R2
	MOVD $const_qInvNeg, R23
	LDP  ·qElement+0(SB), (R9, R10)
	LDP  ·qElement+16(SB), (R11, R12)
	LDP  ·qElement+32(SB), (R13, R14)
	MUL_WORD_0()
	MOVD 8(R1), R2
	MUL_WORD_N()
	MOVD 16(R1), R2
	MUL_WORD_N()
	MOVD 24(R1), R2
	MUL_WORD_N()
	MOVD 32(R1), R2
	MUL_WORD_N()
	MOVD 40(R1), R2
	MUL_WORD_N()

	// reduce if necessary
	SUBS R9, R15, R9
	SBCS R10, R16, R10
	SBCS R11, R17, R11
	SBCS R12, R19, R12
	SBCS R13, R20, R13
	SBCS R14, R21, R14
	MOVD res+0(FP), R0
	CSEL CS, R9, R15, R15
	CSEL CS, R10, R16, R16
	STP  (R15, R16), 0(R0)
	CSEL CS, R11, R17, R17
	CSEL CS, R12, R19, R19
	STP  (R17, R19), 16(R0)
	CSEL CS, R13, R20, R20
	CSEL CS, R14, R21, R21
	STP  (R20, R21), 32(R0)
	RET
