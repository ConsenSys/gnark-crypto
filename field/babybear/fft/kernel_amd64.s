// Code generated by gnark-crypto/generator. DO NOT EDIT.
#include "textflag.h"
#include "funcdata.h"
#include "go_asm.h"

// butterflyMulVec(a, twiddles *Element, m uint64)
// n is the number of blocks of 8 elements to process
TEXT Â·butterflyMulVec(SB), NOSPLIT, $0-24
	MOVD         $const_q, AX
	VPBROADCASTQ AX, Z4
	MOVD         $const_qInvNeg, AX
	VPBROADCASTQ AX, Z5

	// Create mask for low dword in each qword
	VPCMPEQB  Y0, Y0, Y0
	VPMOVZXDQ Y0, Z7
	MOVQ      a+0(FP), AX
	MOVQ      twiddles+8(FP), CX
	MOVQ      m+16(FP), SI
	MOVQ      SI, BX
	SHRQ      $3, BX
	SHLQ      $2, SI
	MOVQ      AX, DX
	ADDQ      SI, DX

loop_1:
	TESTQ     BX, BX
	JEQ       done_2      // n == 0, we are done
	VPMOVZXDQ 0(AX), Z0
	VPMOVZXDQ 0(DX), Z1
	VPADDD    Z0, Z1, Z8  // b0 = a + am
	VPSUBD    Z1, Z0, Z9  // b1 = a - am
	VPSUBD    Z4, Z8, Z6  // PL = b0 - q
	VPMINUD   Z8, Z6, Z8  // b0 = min(b0, PL)
	VPMOVQD   Z8, 0(AX)   // a = b0
	VPADDD    Z4, Z9, Z9  // PL = b1 + q
	VPMOVZXDQ 0(CX), Z2
	VPMULUDQ  Z9, Z2, Z3  // P = b1 * twiddles
	VPANDQ    Z7, Z3, Z6  // m = uint32(P)
	VPMULUDQ  Z6, Z5, Z6  // m = m * qInvNeg
	VPANDQ    Z7, Z6, Z6  // m = uint32(m)
	VPMULUDQ  Z6, Z4, Z6  // m = m * q
	VPADDQ    Z3, Z6, Z3  // P = P + m
	VPSRLQ    $32, Z3, Z3 // P = P >> 32
	VPSUBD    Z4, Z3, Z6  // PL = P - q
	VPMINUD   Z3, Z6, Z3  // P = min(P, PL)
	VPMOVQD   Z3, 0(DX)   // res = P

	// increment pointers to visit next element
	ADDQ $32, AX
	ADDQ $32, CX
	ADDQ $32, DX
	DECQ BX      // decrement n
	JMP  loop_1

done_2:
	RET
