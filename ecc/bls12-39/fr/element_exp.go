// Copyright 2020 ConsenSys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package fr

// expBySqrtExp is equivalent to z.Exp(x, 2fadcf)
//
// uses github.com/mmcloughlin/addchain v0.4.0 to generate a shorter addition chain
func (z *Element) expBySqrtExp(x Element) *Element {
	// addition chain:
	//
	//	_10      = 2*1
	//	_11      = 1 + _10
	//	_100     = 1 + _11
	//	_111     = _11 + _100
	//	_1011    = _100 + _111
	//	_1011000 = _1011 << 3
	//	_1011111 = _111 + _1011000
	//	i26      = ((_1011111 << 5 + _1011) << 4 + _111) << 6
	//	return     _1011 + i26 + _100
	//
	// Operations: 19 squares 9 multiplies

	// Allocate Temporaries.
	var (
		t0 = new(Element)
		t1 = new(Element)
		t2 = new(Element)
	)

	// var t0,t1,t2 Element
	// Step 1: z = x^0x2
	z.Square(&x)

	// Step 2: t0 = x^0x3
	t0.Mul(&x, z)

	// Step 3: z = x^0x4
	z.Mul(&x, t0)

	// Step 4: t1 = x^0x7
	t1.Mul(t0, z)

	// Step 5: t0 = x^0xb
	t0.Mul(z, t1)

	// Step 8: t2 = x^0x58
	t2.Square(t0)
	for s := 1; s < 3; s++ {
		t2.Square(t2)
	}

	// Step 9: t2 = x^0x5f
	t2.Mul(t1, t2)

	// Step 14: t2 = x^0xbe0
	for s := 0; s < 5; s++ {
		t2.Square(t2)
	}

	// Step 15: t2 = x^0xbeb
	t2.Mul(t0, t2)

	// Step 19: t2 = x^0xbeb0
	for s := 0; s < 4; s++ {
		t2.Square(t2)
	}

	// Step 20: t1 = x^0xbeb7
	t1.Mul(t1, t2)

	// Step 26: t1 = x^0x2fadc0
	for s := 0; s < 6; s++ {
		t1.Square(t1)
	}

	// Step 27: t0 = x^0x2fadcb
	t0.Mul(t0, t1)

	// Step 28: z = x^0x2fadcf
	z.Mul(z, t0)

	return z
}

// expByLegendreExp is equivalent to z.Exp(x, 2fadcf8)
//
// uses github.com/mmcloughlin/addchain v0.4.0 to generate a shorter addition chain
func (z *Element) expByLegendreExp(x Element) *Element {
	// addition chain:
	//
	//	_1000     = 1 << 3
	//	_1001     = 1 + _1000
	//	_100100   = _1001 << 2
	//	_1001000  = 2*_100100
	//	_1101100  = _100100 + _1001000
	//	_1110101  = _1001 + _1101100
	//	_11101010 = 2*_1110101
	//	i11       = _100100 + _11101010
	//	i14       = 2*i11 + i11 + _1110101
	//	i29       = (2*i14 + i14 + i11) << 11 + i14
	//	return      i29 << 3
	//
	// Operations: 23 squares 9 multiplies

	// Allocate Temporaries.
	var (
		t0 = new(Element)
		t1 = new(Element)
	)

	// var t0,t1 Element
	// Step 3: z = x^0x8
	z.Square(&x)
	for s := 1; s < 3; s++ {
		z.Square(z)
	}

	// Step 4: z = x^0x9
	z.Mul(&x, z)

	// Step 6: t0 = x^0x24
	t0.Square(z)
	for s := 1; s < 2; s++ {
		t0.Square(t0)
	}

	// Step 7: t1 = x^0x48
	t1.Square(t0)

	// Step 8: t1 = x^0x6c
	t1.Mul(t0, t1)

	// Step 9: z = x^0x75
	z.Mul(z, t1)

	// Step 10: t1 = x^0xea
	t1.Square(z)

	// Step 11: t0 = x^0x10e
	t0.Mul(t0, t1)

	// Step 12: t1 = x^0x21c
	t1.Square(t0)

	// Step 13: t1 = x^0x32a
	t1.Mul(t0, t1)

	// Step 14: z = x^0x39f
	z.Mul(z, t1)

	// Step 15: t1 = x^0x73e
	t1.Square(z)

	// Step 16: t1 = x^0xadd
	t1.Mul(z, t1)

	// Step 17: t0 = x^0xbeb
	t0.Mul(t0, t1)

	// Step 28: t0 = x^0x5f5800
	for s := 0; s < 11; s++ {
		t0.Square(t0)
	}

	// Step 29: z = x^0x5f5b9f
	z.Mul(z, t0)

	// Step 32: z = x^0x2fadcf8
	for s := 0; s < 3; s++ {
		z.Square(z)
	}

	return z
}
