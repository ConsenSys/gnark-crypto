package sis

import (
	"math/bits"

	"github.com/consensys/gnark-crypto/ecc/bn254/fr"
)

// fftDIF64 is generated by fft.go.tmpl template helpers and contains the unrolled code for FFT on 64 elements
// equivalent code: r.Domain.FFT(k, fft.DIF, fft.OnCoset(), fft.WithNbTasks(1))
func fftDIF64(a []fr.Element, coset []fr.Element, twiddles [][]fr.Element) {

	r := coset[1]
	r2 := coset[1]
	r4 := coset[1]
	r2.Square(&r2)
	r4.Mul(&r2, &r2)

	for i := 0; i < len(twiddles[0]); i++ {
		twiddles[0][i].Mul(&twiddles[0][i], &r)
	}
	for i := 0; i < len(twiddles[1]); i++ {
		twiddles[1][i].Mul(&twiddles[1][i], &r2)
	}
	if len(twiddles) > 2 {
		for i := 0; i < len(twiddles[2]); i++ {
			twiddles[2][i].Mul(&twiddles[2][i], &r4)
		}
	}

	n := uint64(len(a))
	nn := uint64(64 - bits.TrailingZeros64(n))

	a[4].Mul(&a[4], &twiddles[2][bits.Reverse64(0)>>nn])
	a[5].Mul(&a[5], &twiddles[2][bits.Reverse64(0)>>nn])
	a[6].Mul(&a[6], &twiddles[2][bits.Reverse64(0)>>nn])
	a[7].Mul(&a[7], &twiddles[2][bits.Reverse64(0)>>nn])
	fr.Butterfly(&a[0], &a[4])
	fr.Butterfly(&a[1], &a[5])
	fr.Butterfly(&a[2], &a[6])
	fr.Butterfly(&a[3], &a[7])
	a[2].Mul(&a[2], &twiddles[1][bits.Reverse64(0)>>nn])
	a[3].Mul(&a[3], &twiddles[1][bits.Reverse64(0)>>nn])
	a[6].Mul(&a[6], &twiddles[1][bits.Reverse64(1)>>nn])
	a[7].Mul(&a[7], &twiddles[1][bits.Reverse64(1)>>nn])
	fr.Butterfly(&a[0], &a[2])
	fr.Butterfly(&a[1], &a[3])
	fr.Butterfly(&a[4], &a[6])
	fr.Butterfly(&a[5], &a[7])
	a[1].Mul(&a[1], &twiddles[0][bits.Reverse64(0)>>nn])
	a[3].Mul(&a[3], &twiddles[0][bits.Reverse64(1)>>nn])
	a[5].Mul(&a[5], &twiddles[0][bits.Reverse64(2)>>nn])
	a[7].Mul(&a[7], &twiddles[0][bits.Reverse64(3)>>nn])
	fr.Butterfly(&a[0], &a[1])
	fr.Butterfly(&a[2], &a[3])
	fr.Butterfly(&a[4], &a[5])
	fr.Butterfly(&a[6], &a[7])

	// a[2].Mul(&a[2], &twiddles[1][0])
	// a[3].Mul(&a[3], &twiddles[1][0])
	// fr.Butterfly(&a[0], &a[2])
	// fr.Butterfly(&a[1], &a[3])
	// a[1].Mul(&a[1], &twiddles[0][0])
	// a[3].Mul(&a[3], &twiddles[0][1])
	// fr.Butterfly(&a[0], &a[1])
	// fr.Butterfly(&a[2], &a[3])
}
