// Copyright 2020 Consensys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package fft

import (
	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark-crypto/internal/parallel"
	"math/big"
	"math/bits"

	"github.com/consensys/gnark-crypto/ecc/bls12-377/fr"
)

// Decimation is used in the FFT call to select decimation in time or in frequency
type Decimation uint8

const (
	DIT Decimation = iota
	DIF
)

var _ = big.NewInt(0)

// parallelize threshold for a single butterfly op, if the fft stage is not parallelized already
const butterflyThreshold = 16

// FFT computes (recursively) the discrete Fourier transform of a and stores the result in a
// if decimation == DIT (decimation in time), the input must be in bit-reversed order
// if decimation == DIF (decimation in frequency), the output will be in bit-reversed order
func (domain *Domain) FFT(a []fr.Element, decimation Decimation, opts ...Option) {

	opt := fftOptions(opts...)

	// if coset != 0, scale by coset table
	if opt.coset {
		if decimation == DIT {
			// scale by coset table (in bit reversed order)
			parallel.Execute(len(a), func(start, end int) {
				n := uint64(len(a))
				nn := uint64(64 - bits.TrailingZeros64(n))
				for i := start; i < end; i++ {
					irev := int(bits.Reverse64(uint64(i)) >> nn)
					a[i].Mul(&a[i], &domain.CosetTable[irev])
				}
			}, opt.nbTasks)
		} else {
			parallel.Execute(len(a), func(start, end int) {
				for i := start; i < end; i++ {
					a[i].Mul(&a[i], &domain.CosetTable[i])
				}
			}, opt.nbTasks)
		}
	}

	// find the stage where we should stop spawning go routines in our recursive calls
	// (ie when we have as many go routines running as we have available CPUs)
	maxSplits := bits.TrailingZeros64(ecc.NextPowerOfTwo(uint64(opt.nbTasks)))
	if opt.nbTasks == 1 {
		maxSplits = -1
	}

	switch decimation {
	case DIF:
		var kernelTwiddles [255]fr.Element
		if domain.Cardinality >= 512 {
			// domain is larger than size of kernel 512, we can precompute twiddles
			// we have to figure out the generator of the kernel
			// question is; at which stage do we have a FFT of size 512 ?
			var w fr.Element
			w.Exp(domain.Generator, big.NewInt(int64(domain.Cardinality/512)))
			precomputeKernelTwiddles(w, &kernelTwiddles)
		}
		difFFTNoPrecompute(a, domain.Generator, &kernelTwiddles, 0, maxSplits, nil, opt.nbTasks)
	case DIT:
		ditFFT(a, domain.Twiddles, 0, maxSplits, nil, opt.nbTasks)
	default:
		panic("not implemented")
	}
}

func precomputeKernelTwiddles(w fr.Element, t *[255]fr.Element) {
	t[0] = w
	for i := 1; i < len(t); i++ {
		t[i].Mul(&t[i-1], &w)
	}
}

// FFTInverse computes (recursively) the inverse discrete Fourier transform of a and stores the result in a
// if decimation == DIT (decimation in time), the input must be in bit-reversed order
// if decimation == DIF (decimation in frequency), the output will be in bit-reversed order
// coset sets the shift of the fft (0 = no shift, standard fft)
// len(a) must be a power of 2, and w must be a len(a)th root of unity in field F.
func (domain *Domain) FFTInverse(a []fr.Element, decimation Decimation, opts ...Option) {
	opt := fftOptions(opts...)

	// find the stage where we should stop spawning go routines in our recursive calls
	// (ie when we have as many go routines running as we have available CPUs)
	maxSplits := bits.TrailingZeros64(ecc.NextPowerOfTwo(uint64(opt.nbTasks)))
	if opt.nbTasks == 1 {
		maxSplits = -1
	}
	switch decimation {
	case DIF:
		difFFT(a, domain.TwiddlesInv, 0, maxSplits, nil, opt.nbTasks)
	case DIT:
		ditFFT(a, domain.TwiddlesInv, 0, maxSplits, nil, opt.nbTasks)
	default:
		panic("not implemented")
	}

	// scale by CardinalityInv
	if !opt.coset {
		parallel.Execute(len(a), func(start, end int) {
			for i := start; i < end; i++ {
				a[i].Mul(&a[i], &domain.CardinalityInv)
			}
		}, opt.nbTasks)
		return
	}

	if decimation == DIT {
		parallel.Execute(len(a), func(start, end int) {
			for i := start; i < end; i++ {
				a[i].Mul(&a[i], &domain.CosetTableInv[i]).
					Mul(&a[i], &domain.CardinalityInv)
			}
		}, opt.nbTasks)
		return
	}

	// decimation == DIF, need to access coset table in bit reversed order.
	parallel.Execute(len(a), func(start, end int) {
		n := uint64(len(a))
		nn := uint64(64 - bits.TrailingZeros64(n))
		for i := start; i < end; i++ {
			irev := int(bits.Reverse64(uint64(i)) >> nn)
			a[i].Mul(&a[i], &domain.CosetTableInv[irev]).
				Mul(&a[i], &domain.CardinalityInv)
		}
	}, opt.nbTasks)

}

func difFFT(a []fr.Element, twiddles [][]fr.Element, stage, maxSplits int, chDone chan struct{}, nbTasks int) {
	if chDone != nil {
		defer close(chDone)
	}

	n := len(a)
	if n == 1 {
		return
	} else if n == 8 {
		kerDIF8(a, twiddles, stage)
		return
	}
	m := n >> 1

	// if stage < maxSplits, we parallelize this butterfly
	// but we have only numCPU / stage cpus available
	if (m > butterflyThreshold) && (stage < maxSplits) {
		// 1 << stage == estimated used CPUs
		numCPU := nbTasks / (1 << (stage))
		parallel.Execute(m, func(start, end int) {
			for i := start; i < end; i++ {
				fr.Butterfly(&a[i], &a[i+m])
				a[i+m].Mul(&a[i+m], &twiddles[stage][i])
			}
		}, numCPU)
	} else {
		// i == 0
		fr.Butterfly(&a[0], &a[m])
		for i := 1; i < m; i++ {
			fr.Butterfly(&a[i], &a[i+m])
			a[i+m].Mul(&a[i+m], &twiddles[stage][i])
		}
	}

	if m == 1 {
		return
	}

	nextStage := stage + 1
	if stage < maxSplits {
		chDone := make(chan struct{}, 1)
		go difFFT(a[m:n], twiddles, nextStage, maxSplits, chDone, nbTasks)
		difFFT(a[0:m], twiddles, nextStage, maxSplits, nil, nbTasks)
		<-chDone
	} else {
		difFFT(a[0:m], twiddles, nextStage, maxSplits, nil, nbTasks)
		difFFT(a[m:n], twiddles, nextStage, maxSplits, nil, nbTasks)
	}

}

func ditFFT(a []fr.Element, twiddles [][]fr.Element, stage, maxSplits int, chDone chan struct{}, nbTasks int) {
	if chDone != nil {
		defer close(chDone)
	}
	n := len(a)
	if n == 1 {
		return
	} else if n == 8 {
		kerDIT8(a, twiddles, stage)
		return
	}
	m := n >> 1

	nextStage := stage + 1

	if stage < maxSplits {
		// that's the only time we fire go routines
		chDone := make(chan struct{}, 1)
		go ditFFT(a[m:], twiddles, nextStage, maxSplits, chDone, nbTasks)
		ditFFT(a[0:m], twiddles, nextStage, maxSplits, nil, nbTasks)
		<-chDone
	} else {
		ditFFT(a[0:m], twiddles, nextStage, maxSplits, nil, nbTasks)
		ditFFT(a[m:n], twiddles, nextStage, maxSplits, nil, nbTasks)

	}

	// if stage < maxSplits, we parallelize this butterfly
	// but we have only numCPU / stage cpus available
	if (m > butterflyThreshold) && (stage < maxSplits) {
		// 1 << stage == estimated used CPUs
		numCPU := nbTasks / (1 << (stage))
		parallel.Execute(m, func(start, end int) {
			for k := start; k < end; k++ {
				a[k+m].Mul(&a[k+m], &twiddles[stage][k])
				fr.Butterfly(&a[k], &a[k+m])
			}
		}, numCPU)

	} else {
		fr.Butterfly(&a[0], &a[m])
		for k := 1; k < m; k++ {
			a[k+m].Mul(&a[k+m], &twiddles[stage][k])
			fr.Butterfly(&a[k], &a[k+m])
		}
	}
}

// kerDIT8 is a kernel that process a FFT of size 8
func kerDIT8(a []fr.Element, twiddles [][]fr.Element, stage int) {

	fr.Butterfly(&a[0], &a[1])
	fr.Butterfly(&a[2], &a[3])
	fr.Butterfly(&a[4], &a[5])
	fr.Butterfly(&a[6], &a[7])
	fr.Butterfly(&a[0], &a[2])
	a[3].Mul(&a[3], &twiddles[stage+1][1])
	fr.Butterfly(&a[1], &a[3])
	fr.Butterfly(&a[4], &a[6])
	a[7].Mul(&a[7], &twiddles[stage+1][1])
	fr.Butterfly(&a[5], &a[7])
	fr.Butterfly(&a[0], &a[4])
	a[5].Mul(&a[5], &twiddles[stage+0][1])
	fr.Butterfly(&a[1], &a[5])
	a[6].Mul(&a[6], &twiddles[stage+0][2])
	fr.Butterfly(&a[2], &a[6])
	a[7].Mul(&a[7], &twiddles[stage+0][3])
	fr.Butterfly(&a[3], &a[7])
}

// kerDIF8 is a kernel that process a FFT of size 8
func kerDIF8(a []fr.Element, twiddles [][]fr.Element, stage int) {

	fr.Butterfly(&a[0], &a[4])
	fr.Butterfly(&a[1], &a[5])
	fr.Butterfly(&a[2], &a[6])
	fr.Butterfly(&a[3], &a[7])
	a[5].Mul(&a[5], &twiddles[stage+0][1])
	a[6].Mul(&a[6], &twiddles[stage+0][2])
	a[7].Mul(&a[7], &twiddles[stage+0][3])
	fr.Butterfly(&a[0], &a[2])
	fr.Butterfly(&a[1], &a[3])
	fr.Butterfly(&a[4], &a[6])
	fr.Butterfly(&a[5], &a[7])
	a[3].Mul(&a[3], &twiddles[stage+1][1])
	a[7].Mul(&a[7], &twiddles[stage+1][1])
	fr.Butterfly(&a[0], &a[1])
	fr.Butterfly(&a[2], &a[3])
	fr.Butterfly(&a[4], &a[5])
	fr.Butterfly(&a[6], &a[7])
}

func difFFTNoPrecompute(a []fr.Element, w fr.Element, kernelTwiddles *[255]fr.Element, stage, maxSplits int, chDone chan struct{}, nbTasks int) {
	if chDone != nil {
		defer close(chDone)
	}

	n := len(a)
	if n == 1 {
		return
	} else if n == 512 {
		kerDIFNoPrecompute512(a, kernelTwiddles, stage)
		return
	}
	m := n >> 1

	// i == 0
	fr.Butterfly(&a[0], &a[m])
	if m == 1 {
		return
	}

	// if stage < maxSplits, we parallelize this butterfly
	// but we have only numCPU / stage cpus available
	if (m > butterflyThreshold) && (stage < maxSplits) {
		// 1 << stage == estimated used CPUs
		numCPU := nbTasks / (1 << (stage))
		w := w
		parallel.Execute(m, func(start, end int) {
			if start == 0 {
				start++
			}
			var at fr.Element
			if start == 1 {
				at = w
			} else {
				at.Exp(w, big.NewInt(int64(start)))
			}
			for i := start; i < end; i++ {
				fr.Butterfly(&a[i], &a[i+m])
				a[i+m].Mul(&a[i+m], &at)
				at.Mul(&at, &w)
			}
		}, numCPU)
	} else {
		at := w
		for i := 1; i < m; i++ {
			fr.Butterfly(&a[i], &a[i+m])
			a[i+m].Mul(&a[i+m], &at)
			at.Mul(&at, &w)
		}
	}

	w.Square(&w)
	nextStage := stage + 1
	if stage < maxSplits {
		chDone := make(chan struct{}, 1)
		go difFFTNoPrecompute(a[m:n], w, kernelTwiddles, nextStage, maxSplits, chDone, nbTasks)
		difFFTNoPrecompute(a[0:m], w, kernelTwiddles, nextStage, maxSplits, nil, nbTasks)
		<-chDone
	} else {
		difFFTNoPrecompute(a[0:m], w, kernelTwiddles, nextStage, maxSplits, nil, nbTasks)
		difFFTNoPrecompute(a[m:n], w, kernelTwiddles, nextStage, maxSplits, nil, nbTasks)
	}

}

// kerDIFNoPrecompute512 is a kernel that process a FFT of size 8
func kerDIFNoPrecompute512(a []fr.Element, ws *[255]fr.Element, stage int) {

	for offset := 0; offset < 512; offset += 512 {
		fr.Butterfly(&a[offset], &a[offset+256])
		k := 1
		for i := offset + 1; i < offset+256; i++ {
			fr.Butterfly(&a[i], &a[i+256])
			a[i+256].Mul(&a[i+256], &ws[1*k-1])
			k++
		}
	}
	for offset := 0; offset < 512; offset += 256 {
		fr.Butterfly(&a[offset], &a[offset+128])
		k := 1
		for i := offset + 1; i < offset+128; i++ {
			fr.Butterfly(&a[i], &a[i+128])
			a[i+128].Mul(&a[i+128], &ws[2*k-1])
			k++
		}
	}
	for offset := 0; offset < 512; offset += 128 {
		fr.Butterfly(&a[offset], &a[offset+64])
		k := 1
		for i := offset + 1; i < offset+64; i++ {
			fr.Butterfly(&a[i], &a[i+64])
			a[i+64].Mul(&a[i+64], &ws[4*k-1])
			k++
		}
	}
	for offset := 0; offset < 512; offset += 64 {
		fr.Butterfly(&a[offset], &a[offset+32])
		k := 1
		for i := offset + 1; i < offset+32; i++ {
			fr.Butterfly(&a[i], &a[i+32])
			a[i+32].Mul(&a[i+32], &ws[8*k-1])
			k++
		}
	}
	for offset := 0; offset < 512; offset += 32 {
		fr.Butterfly(&a[offset], &a[offset+16])
		k := 1
		for i := offset + 1; i < offset+16; i++ {
			fr.Butterfly(&a[i], &a[i+16])
			a[i+16].Mul(&a[i+16], &ws[16*k-1])
			k++
		}
	}
	for offset := 0; offset < 512; offset += 16 {
		fr.Butterfly(&a[offset], &a[offset+8])
		k := 1
		for i := offset + 1; i < offset+8; i++ {
			fr.Butterfly(&a[i], &a[i+8])
			a[i+8].Mul(&a[i+8], &ws[32*k-1])
			k++
		}
	}
	for offset := 0; offset < 512; offset += 8 {
		fr.Butterfly(&a[offset], &a[offset+4])
		k := 1
		for i := offset + 1; i < offset+4; i++ {
			fr.Butterfly(&a[i], &a[i+4])
			a[i+4].Mul(&a[i+4], &ws[64*k-1])
			k++
		}
	}
	fr.Butterfly(&a[0], &a[2])
	fr.Butterfly(&a[1], &a[3])
	a[3].Mul(&a[3], &ws[127])
	fr.Butterfly(&a[4], &a[6])
	fr.Butterfly(&a[5], &a[7])
	a[7].Mul(&a[7], &ws[127])
	fr.Butterfly(&a[8], &a[10])
	fr.Butterfly(&a[9], &a[11])
	a[11].Mul(&a[11], &ws[127])
	fr.Butterfly(&a[12], &a[14])
	fr.Butterfly(&a[13], &a[15])
	a[15].Mul(&a[15], &ws[127])
	fr.Butterfly(&a[16], &a[18])
	fr.Butterfly(&a[17], &a[19])
	a[19].Mul(&a[19], &ws[127])
	fr.Butterfly(&a[20], &a[22])
	fr.Butterfly(&a[21], &a[23])
	a[23].Mul(&a[23], &ws[127])
	fr.Butterfly(&a[24], &a[26])
	fr.Butterfly(&a[25], &a[27])
	a[27].Mul(&a[27], &ws[127])
	fr.Butterfly(&a[28], &a[30])
	fr.Butterfly(&a[29], &a[31])
	a[31].Mul(&a[31], &ws[127])
	fr.Butterfly(&a[32], &a[34])
	fr.Butterfly(&a[33], &a[35])
	a[35].Mul(&a[35], &ws[127])
	fr.Butterfly(&a[36], &a[38])
	fr.Butterfly(&a[37], &a[39])
	a[39].Mul(&a[39], &ws[127])
	fr.Butterfly(&a[40], &a[42])
	fr.Butterfly(&a[41], &a[43])
	a[43].Mul(&a[43], &ws[127])
	fr.Butterfly(&a[44], &a[46])
	fr.Butterfly(&a[45], &a[47])
	a[47].Mul(&a[47], &ws[127])
	fr.Butterfly(&a[48], &a[50])
	fr.Butterfly(&a[49], &a[51])
	a[51].Mul(&a[51], &ws[127])
	fr.Butterfly(&a[52], &a[54])
	fr.Butterfly(&a[53], &a[55])
	a[55].Mul(&a[55], &ws[127])
	fr.Butterfly(&a[56], &a[58])
	fr.Butterfly(&a[57], &a[59])
	a[59].Mul(&a[59], &ws[127])
	fr.Butterfly(&a[60], &a[62])
	fr.Butterfly(&a[61], &a[63])
	a[63].Mul(&a[63], &ws[127])
	fr.Butterfly(&a[64], &a[66])
	fr.Butterfly(&a[65], &a[67])
	a[67].Mul(&a[67], &ws[127])
	fr.Butterfly(&a[68], &a[70])
	fr.Butterfly(&a[69], &a[71])
	a[71].Mul(&a[71], &ws[127])
	fr.Butterfly(&a[72], &a[74])
	fr.Butterfly(&a[73], &a[75])
	a[75].Mul(&a[75], &ws[127])
	fr.Butterfly(&a[76], &a[78])
	fr.Butterfly(&a[77], &a[79])
	a[79].Mul(&a[79], &ws[127])
	fr.Butterfly(&a[80], &a[82])
	fr.Butterfly(&a[81], &a[83])
	a[83].Mul(&a[83], &ws[127])
	fr.Butterfly(&a[84], &a[86])
	fr.Butterfly(&a[85], &a[87])
	a[87].Mul(&a[87], &ws[127])
	fr.Butterfly(&a[88], &a[90])
	fr.Butterfly(&a[89], &a[91])
	a[91].Mul(&a[91], &ws[127])
	fr.Butterfly(&a[92], &a[94])
	fr.Butterfly(&a[93], &a[95])
	a[95].Mul(&a[95], &ws[127])
	fr.Butterfly(&a[96], &a[98])
	fr.Butterfly(&a[97], &a[99])
	a[99].Mul(&a[99], &ws[127])
	fr.Butterfly(&a[100], &a[102])
	fr.Butterfly(&a[101], &a[103])
	a[103].Mul(&a[103], &ws[127])
	fr.Butterfly(&a[104], &a[106])
	fr.Butterfly(&a[105], &a[107])
	a[107].Mul(&a[107], &ws[127])
	fr.Butterfly(&a[108], &a[110])
	fr.Butterfly(&a[109], &a[111])
	a[111].Mul(&a[111], &ws[127])
	fr.Butterfly(&a[112], &a[114])
	fr.Butterfly(&a[113], &a[115])
	a[115].Mul(&a[115], &ws[127])
	fr.Butterfly(&a[116], &a[118])
	fr.Butterfly(&a[117], &a[119])
	a[119].Mul(&a[119], &ws[127])
	fr.Butterfly(&a[120], &a[122])
	fr.Butterfly(&a[121], &a[123])
	a[123].Mul(&a[123], &ws[127])
	fr.Butterfly(&a[124], &a[126])
	fr.Butterfly(&a[125], &a[127])
	a[127].Mul(&a[127], &ws[127])
	fr.Butterfly(&a[128], &a[130])
	fr.Butterfly(&a[129], &a[131])
	a[131].Mul(&a[131], &ws[127])
	fr.Butterfly(&a[132], &a[134])
	fr.Butterfly(&a[133], &a[135])
	a[135].Mul(&a[135], &ws[127])
	fr.Butterfly(&a[136], &a[138])
	fr.Butterfly(&a[137], &a[139])
	a[139].Mul(&a[139], &ws[127])
	fr.Butterfly(&a[140], &a[142])
	fr.Butterfly(&a[141], &a[143])
	a[143].Mul(&a[143], &ws[127])
	fr.Butterfly(&a[144], &a[146])
	fr.Butterfly(&a[145], &a[147])
	a[147].Mul(&a[147], &ws[127])
	fr.Butterfly(&a[148], &a[150])
	fr.Butterfly(&a[149], &a[151])
	a[151].Mul(&a[151], &ws[127])
	fr.Butterfly(&a[152], &a[154])
	fr.Butterfly(&a[153], &a[155])
	a[155].Mul(&a[155], &ws[127])
	fr.Butterfly(&a[156], &a[158])
	fr.Butterfly(&a[157], &a[159])
	a[159].Mul(&a[159], &ws[127])
	fr.Butterfly(&a[160], &a[162])
	fr.Butterfly(&a[161], &a[163])
	a[163].Mul(&a[163], &ws[127])
	fr.Butterfly(&a[164], &a[166])
	fr.Butterfly(&a[165], &a[167])
	a[167].Mul(&a[167], &ws[127])
	fr.Butterfly(&a[168], &a[170])
	fr.Butterfly(&a[169], &a[171])
	a[171].Mul(&a[171], &ws[127])
	fr.Butterfly(&a[172], &a[174])
	fr.Butterfly(&a[173], &a[175])
	a[175].Mul(&a[175], &ws[127])
	fr.Butterfly(&a[176], &a[178])
	fr.Butterfly(&a[177], &a[179])
	a[179].Mul(&a[179], &ws[127])
	fr.Butterfly(&a[180], &a[182])
	fr.Butterfly(&a[181], &a[183])
	a[183].Mul(&a[183], &ws[127])
	fr.Butterfly(&a[184], &a[186])
	fr.Butterfly(&a[185], &a[187])
	a[187].Mul(&a[187], &ws[127])
	fr.Butterfly(&a[188], &a[190])
	fr.Butterfly(&a[189], &a[191])
	a[191].Mul(&a[191], &ws[127])
	fr.Butterfly(&a[192], &a[194])
	fr.Butterfly(&a[193], &a[195])
	a[195].Mul(&a[195], &ws[127])
	fr.Butterfly(&a[196], &a[198])
	fr.Butterfly(&a[197], &a[199])
	a[199].Mul(&a[199], &ws[127])
	fr.Butterfly(&a[200], &a[202])
	fr.Butterfly(&a[201], &a[203])
	a[203].Mul(&a[203], &ws[127])
	fr.Butterfly(&a[204], &a[206])
	fr.Butterfly(&a[205], &a[207])
	a[207].Mul(&a[207], &ws[127])
	fr.Butterfly(&a[208], &a[210])
	fr.Butterfly(&a[209], &a[211])
	a[211].Mul(&a[211], &ws[127])
	fr.Butterfly(&a[212], &a[214])
	fr.Butterfly(&a[213], &a[215])
	a[215].Mul(&a[215], &ws[127])
	fr.Butterfly(&a[216], &a[218])
	fr.Butterfly(&a[217], &a[219])
	a[219].Mul(&a[219], &ws[127])
	fr.Butterfly(&a[220], &a[222])
	fr.Butterfly(&a[221], &a[223])
	a[223].Mul(&a[223], &ws[127])
	fr.Butterfly(&a[224], &a[226])
	fr.Butterfly(&a[225], &a[227])
	a[227].Mul(&a[227], &ws[127])
	fr.Butterfly(&a[228], &a[230])
	fr.Butterfly(&a[229], &a[231])
	a[231].Mul(&a[231], &ws[127])
	fr.Butterfly(&a[232], &a[234])
	fr.Butterfly(&a[233], &a[235])
	a[235].Mul(&a[235], &ws[127])
	fr.Butterfly(&a[236], &a[238])
	fr.Butterfly(&a[237], &a[239])
	a[239].Mul(&a[239], &ws[127])
	fr.Butterfly(&a[240], &a[242])
	fr.Butterfly(&a[241], &a[243])
	a[243].Mul(&a[243], &ws[127])
	fr.Butterfly(&a[244], &a[246])
	fr.Butterfly(&a[245], &a[247])
	a[247].Mul(&a[247], &ws[127])
	fr.Butterfly(&a[248], &a[250])
	fr.Butterfly(&a[249], &a[251])
	a[251].Mul(&a[251], &ws[127])
	fr.Butterfly(&a[252], &a[254])
	fr.Butterfly(&a[253], &a[255])
	a[255].Mul(&a[255], &ws[127])
	fr.Butterfly(&a[256], &a[258])
	fr.Butterfly(&a[257], &a[259])
	a[259].Mul(&a[259], &ws[127])
	fr.Butterfly(&a[260], &a[262])
	fr.Butterfly(&a[261], &a[263])
	a[263].Mul(&a[263], &ws[127])
	fr.Butterfly(&a[264], &a[266])
	fr.Butterfly(&a[265], &a[267])
	a[267].Mul(&a[267], &ws[127])
	fr.Butterfly(&a[268], &a[270])
	fr.Butterfly(&a[269], &a[271])
	a[271].Mul(&a[271], &ws[127])
	fr.Butterfly(&a[272], &a[274])
	fr.Butterfly(&a[273], &a[275])
	a[275].Mul(&a[275], &ws[127])
	fr.Butterfly(&a[276], &a[278])
	fr.Butterfly(&a[277], &a[279])
	a[279].Mul(&a[279], &ws[127])
	fr.Butterfly(&a[280], &a[282])
	fr.Butterfly(&a[281], &a[283])
	a[283].Mul(&a[283], &ws[127])
	fr.Butterfly(&a[284], &a[286])
	fr.Butterfly(&a[285], &a[287])
	a[287].Mul(&a[287], &ws[127])
	fr.Butterfly(&a[288], &a[290])
	fr.Butterfly(&a[289], &a[291])
	a[291].Mul(&a[291], &ws[127])
	fr.Butterfly(&a[292], &a[294])
	fr.Butterfly(&a[293], &a[295])
	a[295].Mul(&a[295], &ws[127])
	fr.Butterfly(&a[296], &a[298])
	fr.Butterfly(&a[297], &a[299])
	a[299].Mul(&a[299], &ws[127])
	fr.Butterfly(&a[300], &a[302])
	fr.Butterfly(&a[301], &a[303])
	a[303].Mul(&a[303], &ws[127])
	fr.Butterfly(&a[304], &a[306])
	fr.Butterfly(&a[305], &a[307])
	a[307].Mul(&a[307], &ws[127])
	fr.Butterfly(&a[308], &a[310])
	fr.Butterfly(&a[309], &a[311])
	a[311].Mul(&a[311], &ws[127])
	fr.Butterfly(&a[312], &a[314])
	fr.Butterfly(&a[313], &a[315])
	a[315].Mul(&a[315], &ws[127])
	fr.Butterfly(&a[316], &a[318])
	fr.Butterfly(&a[317], &a[319])
	a[319].Mul(&a[319], &ws[127])
	fr.Butterfly(&a[320], &a[322])
	fr.Butterfly(&a[321], &a[323])
	a[323].Mul(&a[323], &ws[127])
	fr.Butterfly(&a[324], &a[326])
	fr.Butterfly(&a[325], &a[327])
	a[327].Mul(&a[327], &ws[127])
	fr.Butterfly(&a[328], &a[330])
	fr.Butterfly(&a[329], &a[331])
	a[331].Mul(&a[331], &ws[127])
	fr.Butterfly(&a[332], &a[334])
	fr.Butterfly(&a[333], &a[335])
	a[335].Mul(&a[335], &ws[127])
	fr.Butterfly(&a[336], &a[338])
	fr.Butterfly(&a[337], &a[339])
	a[339].Mul(&a[339], &ws[127])
	fr.Butterfly(&a[340], &a[342])
	fr.Butterfly(&a[341], &a[343])
	a[343].Mul(&a[343], &ws[127])
	fr.Butterfly(&a[344], &a[346])
	fr.Butterfly(&a[345], &a[347])
	a[347].Mul(&a[347], &ws[127])
	fr.Butterfly(&a[348], &a[350])
	fr.Butterfly(&a[349], &a[351])
	a[351].Mul(&a[351], &ws[127])
	fr.Butterfly(&a[352], &a[354])
	fr.Butterfly(&a[353], &a[355])
	a[355].Mul(&a[355], &ws[127])
	fr.Butterfly(&a[356], &a[358])
	fr.Butterfly(&a[357], &a[359])
	a[359].Mul(&a[359], &ws[127])
	fr.Butterfly(&a[360], &a[362])
	fr.Butterfly(&a[361], &a[363])
	a[363].Mul(&a[363], &ws[127])
	fr.Butterfly(&a[364], &a[366])
	fr.Butterfly(&a[365], &a[367])
	a[367].Mul(&a[367], &ws[127])
	fr.Butterfly(&a[368], &a[370])
	fr.Butterfly(&a[369], &a[371])
	a[371].Mul(&a[371], &ws[127])
	fr.Butterfly(&a[372], &a[374])
	fr.Butterfly(&a[373], &a[375])
	a[375].Mul(&a[375], &ws[127])
	fr.Butterfly(&a[376], &a[378])
	fr.Butterfly(&a[377], &a[379])
	a[379].Mul(&a[379], &ws[127])
	fr.Butterfly(&a[380], &a[382])
	fr.Butterfly(&a[381], &a[383])
	a[383].Mul(&a[383], &ws[127])
	fr.Butterfly(&a[384], &a[386])
	fr.Butterfly(&a[385], &a[387])
	a[387].Mul(&a[387], &ws[127])
	fr.Butterfly(&a[388], &a[390])
	fr.Butterfly(&a[389], &a[391])
	a[391].Mul(&a[391], &ws[127])
	fr.Butterfly(&a[392], &a[394])
	fr.Butterfly(&a[393], &a[395])
	a[395].Mul(&a[395], &ws[127])
	fr.Butterfly(&a[396], &a[398])
	fr.Butterfly(&a[397], &a[399])
	a[399].Mul(&a[399], &ws[127])
	fr.Butterfly(&a[400], &a[402])
	fr.Butterfly(&a[401], &a[403])
	a[403].Mul(&a[403], &ws[127])
	fr.Butterfly(&a[404], &a[406])
	fr.Butterfly(&a[405], &a[407])
	a[407].Mul(&a[407], &ws[127])
	fr.Butterfly(&a[408], &a[410])
	fr.Butterfly(&a[409], &a[411])
	a[411].Mul(&a[411], &ws[127])
	fr.Butterfly(&a[412], &a[414])
	fr.Butterfly(&a[413], &a[415])
	a[415].Mul(&a[415], &ws[127])
	fr.Butterfly(&a[416], &a[418])
	fr.Butterfly(&a[417], &a[419])
	a[419].Mul(&a[419], &ws[127])
	fr.Butterfly(&a[420], &a[422])
	fr.Butterfly(&a[421], &a[423])
	a[423].Mul(&a[423], &ws[127])
	fr.Butterfly(&a[424], &a[426])
	fr.Butterfly(&a[425], &a[427])
	a[427].Mul(&a[427], &ws[127])
	fr.Butterfly(&a[428], &a[430])
	fr.Butterfly(&a[429], &a[431])
	a[431].Mul(&a[431], &ws[127])
	fr.Butterfly(&a[432], &a[434])
	fr.Butterfly(&a[433], &a[435])
	a[435].Mul(&a[435], &ws[127])
	fr.Butterfly(&a[436], &a[438])
	fr.Butterfly(&a[437], &a[439])
	a[439].Mul(&a[439], &ws[127])
	fr.Butterfly(&a[440], &a[442])
	fr.Butterfly(&a[441], &a[443])
	a[443].Mul(&a[443], &ws[127])
	fr.Butterfly(&a[444], &a[446])
	fr.Butterfly(&a[445], &a[447])
	a[447].Mul(&a[447], &ws[127])
	fr.Butterfly(&a[448], &a[450])
	fr.Butterfly(&a[449], &a[451])
	a[451].Mul(&a[451], &ws[127])
	fr.Butterfly(&a[452], &a[454])
	fr.Butterfly(&a[453], &a[455])
	a[455].Mul(&a[455], &ws[127])
	fr.Butterfly(&a[456], &a[458])
	fr.Butterfly(&a[457], &a[459])
	a[459].Mul(&a[459], &ws[127])
	fr.Butterfly(&a[460], &a[462])
	fr.Butterfly(&a[461], &a[463])
	a[463].Mul(&a[463], &ws[127])
	fr.Butterfly(&a[464], &a[466])
	fr.Butterfly(&a[465], &a[467])
	a[467].Mul(&a[467], &ws[127])
	fr.Butterfly(&a[468], &a[470])
	fr.Butterfly(&a[469], &a[471])
	a[471].Mul(&a[471], &ws[127])
	fr.Butterfly(&a[472], &a[474])
	fr.Butterfly(&a[473], &a[475])
	a[475].Mul(&a[475], &ws[127])
	fr.Butterfly(&a[476], &a[478])
	fr.Butterfly(&a[477], &a[479])
	a[479].Mul(&a[479], &ws[127])
	fr.Butterfly(&a[480], &a[482])
	fr.Butterfly(&a[481], &a[483])
	a[483].Mul(&a[483], &ws[127])
	fr.Butterfly(&a[484], &a[486])
	fr.Butterfly(&a[485], &a[487])
	a[487].Mul(&a[487], &ws[127])
	fr.Butterfly(&a[488], &a[490])
	fr.Butterfly(&a[489], &a[491])
	a[491].Mul(&a[491], &ws[127])
	fr.Butterfly(&a[492], &a[494])
	fr.Butterfly(&a[493], &a[495])
	a[495].Mul(&a[495], &ws[127])
	fr.Butterfly(&a[496], &a[498])
	fr.Butterfly(&a[497], &a[499])
	a[499].Mul(&a[499], &ws[127])
	fr.Butterfly(&a[500], &a[502])
	fr.Butterfly(&a[501], &a[503])
	a[503].Mul(&a[503], &ws[127])
	fr.Butterfly(&a[504], &a[506])
	fr.Butterfly(&a[505], &a[507])
	a[507].Mul(&a[507], &ws[127])
	fr.Butterfly(&a[508], &a[510])
	fr.Butterfly(&a[509], &a[511])
	a[511].Mul(&a[511], &ws[127])
	fr.Butterfly(&a[0], &a[1])
	fr.Butterfly(&a[2], &a[3])
	fr.Butterfly(&a[4], &a[5])
	fr.Butterfly(&a[6], &a[7])
	fr.Butterfly(&a[8], &a[9])
	fr.Butterfly(&a[10], &a[11])
	fr.Butterfly(&a[12], &a[13])
	fr.Butterfly(&a[14], &a[15])
	fr.Butterfly(&a[16], &a[17])
	fr.Butterfly(&a[18], &a[19])
	fr.Butterfly(&a[20], &a[21])
	fr.Butterfly(&a[22], &a[23])
	fr.Butterfly(&a[24], &a[25])
	fr.Butterfly(&a[26], &a[27])
	fr.Butterfly(&a[28], &a[29])
	fr.Butterfly(&a[30], &a[31])
	fr.Butterfly(&a[32], &a[33])
	fr.Butterfly(&a[34], &a[35])
	fr.Butterfly(&a[36], &a[37])
	fr.Butterfly(&a[38], &a[39])
	fr.Butterfly(&a[40], &a[41])
	fr.Butterfly(&a[42], &a[43])
	fr.Butterfly(&a[44], &a[45])
	fr.Butterfly(&a[46], &a[47])
	fr.Butterfly(&a[48], &a[49])
	fr.Butterfly(&a[50], &a[51])
	fr.Butterfly(&a[52], &a[53])
	fr.Butterfly(&a[54], &a[55])
	fr.Butterfly(&a[56], &a[57])
	fr.Butterfly(&a[58], &a[59])
	fr.Butterfly(&a[60], &a[61])
	fr.Butterfly(&a[62], &a[63])
	fr.Butterfly(&a[64], &a[65])
	fr.Butterfly(&a[66], &a[67])
	fr.Butterfly(&a[68], &a[69])
	fr.Butterfly(&a[70], &a[71])
	fr.Butterfly(&a[72], &a[73])
	fr.Butterfly(&a[74], &a[75])
	fr.Butterfly(&a[76], &a[77])
	fr.Butterfly(&a[78], &a[79])
	fr.Butterfly(&a[80], &a[81])
	fr.Butterfly(&a[82], &a[83])
	fr.Butterfly(&a[84], &a[85])
	fr.Butterfly(&a[86], &a[87])
	fr.Butterfly(&a[88], &a[89])
	fr.Butterfly(&a[90], &a[91])
	fr.Butterfly(&a[92], &a[93])
	fr.Butterfly(&a[94], &a[95])
	fr.Butterfly(&a[96], &a[97])
	fr.Butterfly(&a[98], &a[99])
	fr.Butterfly(&a[100], &a[101])
	fr.Butterfly(&a[102], &a[103])
	fr.Butterfly(&a[104], &a[105])
	fr.Butterfly(&a[106], &a[107])
	fr.Butterfly(&a[108], &a[109])
	fr.Butterfly(&a[110], &a[111])
	fr.Butterfly(&a[112], &a[113])
	fr.Butterfly(&a[114], &a[115])
	fr.Butterfly(&a[116], &a[117])
	fr.Butterfly(&a[118], &a[119])
	fr.Butterfly(&a[120], &a[121])
	fr.Butterfly(&a[122], &a[123])
	fr.Butterfly(&a[124], &a[125])
	fr.Butterfly(&a[126], &a[127])
	fr.Butterfly(&a[128], &a[129])
	fr.Butterfly(&a[130], &a[131])
	fr.Butterfly(&a[132], &a[133])
	fr.Butterfly(&a[134], &a[135])
	fr.Butterfly(&a[136], &a[137])
	fr.Butterfly(&a[138], &a[139])
	fr.Butterfly(&a[140], &a[141])
	fr.Butterfly(&a[142], &a[143])
	fr.Butterfly(&a[144], &a[145])
	fr.Butterfly(&a[146], &a[147])
	fr.Butterfly(&a[148], &a[149])
	fr.Butterfly(&a[150], &a[151])
	fr.Butterfly(&a[152], &a[153])
	fr.Butterfly(&a[154], &a[155])
	fr.Butterfly(&a[156], &a[157])
	fr.Butterfly(&a[158], &a[159])
	fr.Butterfly(&a[160], &a[161])
	fr.Butterfly(&a[162], &a[163])
	fr.Butterfly(&a[164], &a[165])
	fr.Butterfly(&a[166], &a[167])
	fr.Butterfly(&a[168], &a[169])
	fr.Butterfly(&a[170], &a[171])
	fr.Butterfly(&a[172], &a[173])
	fr.Butterfly(&a[174], &a[175])
	fr.Butterfly(&a[176], &a[177])
	fr.Butterfly(&a[178], &a[179])
	fr.Butterfly(&a[180], &a[181])
	fr.Butterfly(&a[182], &a[183])
	fr.Butterfly(&a[184], &a[185])
	fr.Butterfly(&a[186], &a[187])
	fr.Butterfly(&a[188], &a[189])
	fr.Butterfly(&a[190], &a[191])
	fr.Butterfly(&a[192], &a[193])
	fr.Butterfly(&a[194], &a[195])
	fr.Butterfly(&a[196], &a[197])
	fr.Butterfly(&a[198], &a[199])
	fr.Butterfly(&a[200], &a[201])
	fr.Butterfly(&a[202], &a[203])
	fr.Butterfly(&a[204], &a[205])
	fr.Butterfly(&a[206], &a[207])
	fr.Butterfly(&a[208], &a[209])
	fr.Butterfly(&a[210], &a[211])
	fr.Butterfly(&a[212], &a[213])
	fr.Butterfly(&a[214], &a[215])
	fr.Butterfly(&a[216], &a[217])
	fr.Butterfly(&a[218], &a[219])
	fr.Butterfly(&a[220], &a[221])
	fr.Butterfly(&a[222], &a[223])
	fr.Butterfly(&a[224], &a[225])
	fr.Butterfly(&a[226], &a[227])
	fr.Butterfly(&a[228], &a[229])
	fr.Butterfly(&a[230], &a[231])
	fr.Butterfly(&a[232], &a[233])
	fr.Butterfly(&a[234], &a[235])
	fr.Butterfly(&a[236], &a[237])
	fr.Butterfly(&a[238], &a[239])
	fr.Butterfly(&a[240], &a[241])
	fr.Butterfly(&a[242], &a[243])
	fr.Butterfly(&a[244], &a[245])
	fr.Butterfly(&a[246], &a[247])
	fr.Butterfly(&a[248], &a[249])
	fr.Butterfly(&a[250], &a[251])
	fr.Butterfly(&a[252], &a[253])
	fr.Butterfly(&a[254], &a[255])
	fr.Butterfly(&a[256], &a[257])
	fr.Butterfly(&a[258], &a[259])
	fr.Butterfly(&a[260], &a[261])
	fr.Butterfly(&a[262], &a[263])
	fr.Butterfly(&a[264], &a[265])
	fr.Butterfly(&a[266], &a[267])
	fr.Butterfly(&a[268], &a[269])
	fr.Butterfly(&a[270], &a[271])
	fr.Butterfly(&a[272], &a[273])
	fr.Butterfly(&a[274], &a[275])
	fr.Butterfly(&a[276], &a[277])
	fr.Butterfly(&a[278], &a[279])
	fr.Butterfly(&a[280], &a[281])
	fr.Butterfly(&a[282], &a[283])
	fr.Butterfly(&a[284], &a[285])
	fr.Butterfly(&a[286], &a[287])
	fr.Butterfly(&a[288], &a[289])
	fr.Butterfly(&a[290], &a[291])
	fr.Butterfly(&a[292], &a[293])
	fr.Butterfly(&a[294], &a[295])
	fr.Butterfly(&a[296], &a[297])
	fr.Butterfly(&a[298], &a[299])
	fr.Butterfly(&a[300], &a[301])
	fr.Butterfly(&a[302], &a[303])
	fr.Butterfly(&a[304], &a[305])
	fr.Butterfly(&a[306], &a[307])
	fr.Butterfly(&a[308], &a[309])
	fr.Butterfly(&a[310], &a[311])
	fr.Butterfly(&a[312], &a[313])
	fr.Butterfly(&a[314], &a[315])
	fr.Butterfly(&a[316], &a[317])
	fr.Butterfly(&a[318], &a[319])
	fr.Butterfly(&a[320], &a[321])
	fr.Butterfly(&a[322], &a[323])
	fr.Butterfly(&a[324], &a[325])
	fr.Butterfly(&a[326], &a[327])
	fr.Butterfly(&a[328], &a[329])
	fr.Butterfly(&a[330], &a[331])
	fr.Butterfly(&a[332], &a[333])
	fr.Butterfly(&a[334], &a[335])
	fr.Butterfly(&a[336], &a[337])
	fr.Butterfly(&a[338], &a[339])
	fr.Butterfly(&a[340], &a[341])
	fr.Butterfly(&a[342], &a[343])
	fr.Butterfly(&a[344], &a[345])
	fr.Butterfly(&a[346], &a[347])
	fr.Butterfly(&a[348], &a[349])
	fr.Butterfly(&a[350], &a[351])
	fr.Butterfly(&a[352], &a[353])
	fr.Butterfly(&a[354], &a[355])
	fr.Butterfly(&a[356], &a[357])
	fr.Butterfly(&a[358], &a[359])
	fr.Butterfly(&a[360], &a[361])
	fr.Butterfly(&a[362], &a[363])
	fr.Butterfly(&a[364], &a[365])
	fr.Butterfly(&a[366], &a[367])
	fr.Butterfly(&a[368], &a[369])
	fr.Butterfly(&a[370], &a[371])
	fr.Butterfly(&a[372], &a[373])
	fr.Butterfly(&a[374], &a[375])
	fr.Butterfly(&a[376], &a[377])
	fr.Butterfly(&a[378], &a[379])
	fr.Butterfly(&a[380], &a[381])
	fr.Butterfly(&a[382], &a[383])
	fr.Butterfly(&a[384], &a[385])
	fr.Butterfly(&a[386], &a[387])
	fr.Butterfly(&a[388], &a[389])
	fr.Butterfly(&a[390], &a[391])
	fr.Butterfly(&a[392], &a[393])
	fr.Butterfly(&a[394], &a[395])
	fr.Butterfly(&a[396], &a[397])
	fr.Butterfly(&a[398], &a[399])
	fr.Butterfly(&a[400], &a[401])
	fr.Butterfly(&a[402], &a[403])
	fr.Butterfly(&a[404], &a[405])
	fr.Butterfly(&a[406], &a[407])
	fr.Butterfly(&a[408], &a[409])
	fr.Butterfly(&a[410], &a[411])
	fr.Butterfly(&a[412], &a[413])
	fr.Butterfly(&a[414], &a[415])
	fr.Butterfly(&a[416], &a[417])
	fr.Butterfly(&a[418], &a[419])
	fr.Butterfly(&a[420], &a[421])
	fr.Butterfly(&a[422], &a[423])
	fr.Butterfly(&a[424], &a[425])
	fr.Butterfly(&a[426], &a[427])
	fr.Butterfly(&a[428], &a[429])
	fr.Butterfly(&a[430], &a[431])
	fr.Butterfly(&a[432], &a[433])
	fr.Butterfly(&a[434], &a[435])
	fr.Butterfly(&a[436], &a[437])
	fr.Butterfly(&a[438], &a[439])
	fr.Butterfly(&a[440], &a[441])
	fr.Butterfly(&a[442], &a[443])
	fr.Butterfly(&a[444], &a[445])
	fr.Butterfly(&a[446], &a[447])
	fr.Butterfly(&a[448], &a[449])
	fr.Butterfly(&a[450], &a[451])
	fr.Butterfly(&a[452], &a[453])
	fr.Butterfly(&a[454], &a[455])
	fr.Butterfly(&a[456], &a[457])
	fr.Butterfly(&a[458], &a[459])
	fr.Butterfly(&a[460], &a[461])
	fr.Butterfly(&a[462], &a[463])
	fr.Butterfly(&a[464], &a[465])
	fr.Butterfly(&a[466], &a[467])
	fr.Butterfly(&a[468], &a[469])
	fr.Butterfly(&a[470], &a[471])
	fr.Butterfly(&a[472], &a[473])
	fr.Butterfly(&a[474], &a[475])
	fr.Butterfly(&a[476], &a[477])
	fr.Butterfly(&a[478], &a[479])
	fr.Butterfly(&a[480], &a[481])
	fr.Butterfly(&a[482], &a[483])
	fr.Butterfly(&a[484], &a[485])
	fr.Butterfly(&a[486], &a[487])
	fr.Butterfly(&a[488], &a[489])
	fr.Butterfly(&a[490], &a[491])
	fr.Butterfly(&a[492], &a[493])
	fr.Butterfly(&a[494], &a[495])
	fr.Butterfly(&a[496], &a[497])
	fr.Butterfly(&a[498], &a[499])
	fr.Butterfly(&a[500], &a[501])
	fr.Butterfly(&a[502], &a[503])
	fr.Butterfly(&a[504], &a[505])
	fr.Butterfly(&a[506], &a[507])
	fr.Butterfly(&a[508], &a[509])
	fr.Butterfly(&a[510], &a[511])
}
