// Copyright 2020 Consensys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by consensys/gnark-crypto DO NOT EDIT

package bandersnatch

import (
	"math/big"
	"sync"

	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark-crypto/ecc/bls12-381/fr"
)

// CurveParams curve parameters: ax^2 + y^2 = 1 + d*x^2*y^2
type CurveParams struct {
	A, D     fr.Element
	Cofactor fr.Element
	Order    big.Int
	Base     PointAffine
	// endomorphism
	endo     [2]fr.Element
	lambda   big.Int
	glvBasis ecc.Lattice
}

// GetEdwardsCurve returns the twisted Edwards curve on bls12-381/Fr
func GetEdwardsCurve() CurveParams {
	initOnce.Do(initCurveParams)
	// copy to keep Order private
	var res CurveParams

	res.A.Set(&curveParams.A)
	res.D.Set(&curveParams.D)
	res.Cofactor.Set(&curveParams.Cofactor)
	res.Order.Set(&curveParams.Order)
	res.Base.Set(&curveParams.Base)
	res.endo[0].Set(&curveParams.endo[0])
	res.endo[1].Set(&curveParams.endo[1])
	res.lambda.Set(&curveParams.lambda)
	res.glvBasis = curveParams.glvBasis // TODO @gbotrel do proper copy of that

	return res
}

var (
	initOnce    sync.Once
	curveParams CurveParams
)

func initCurveParams() {
	curveParams.A.SetString("-5")
	curveParams.D.SetString("45022363124591815672509500913686876175488063829319466900776701791074614335719")
	curveParams.Cofactor.SetString("4")
	curveParams.Order.SetString("13108968793781547619861935127046491459309155893440570251786403306729687672801", 10)

	curveParams.Base.X.SetString("18886178867200960497001835917649091219057080094937609519140440539760939937304")
	curveParams.Base.Y.SetString("19188667384257783945677642223292697773471335439753913231509108946878080696678")
	curveParams.endo[0].SetString("37446463827641770816307242315180085052603635617490163568005256780843403514036")
	curveParams.endo[1].SetString("49199877423542878313146170939139662862850515542392585932876811575731455068989")
	curveParams.lambda.SetString("8913659658109529928382530854484400854125314752504019737736543920008458395397", 10)
	ecc.PrecomputeLattice(&curveParams.Order, &curveParams.lambda, &curveParams.glvBasis)
}

// mulByA multiplies fr.Element by curveParams.A
func mulByA(x *fr.Element) {
	x.Neg(x)
	fr.MulBy5(x)
}

// mulByD multiplies fr.Element by curveParams.D
func mulByD(x *fr.Element) {
	// Generated by github.com/mmcloughlin/addchain v0.4.0.
	// Operations: 248 doublings 62 additions

	var z, t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25 fr.Element

	t17.Double(x)
	t15.Double(&t17)
	t1.Add(&t17, &t15)
	z.Add(x, &t1)
	t5.Add(x, &z)
	t4.Add(&t17, &t5)
	t20.Add(&t17, &t4)
	t3.Add(&t1, &t20)
	t0.Add(x, &t3)
	t6.Add(x, &t0)
	t24.Add(&t0, &t6)
	t2.Add(&t4, &t24)
	t12.Add(&t17, &t2)
	t0.Add(&t6, &t12)
	t13.Add(&t6, &t0)
	t14.Add(&t5, &t13)
	t3.Add(&t3, &t14)
	t11.Add(&t17, &t3)
	t9.Add(&t17, &t11)
	t18.Add(&t1, &t9)
	t23.Add(&t6, &t18)
	t21.Add(&t1, &t23)
	t19.Add(&t17, &t21)
	t8.Add(&t20, &t19)
	t6.Add(&t20, &t8)
	t10.Add(&t5, &t6)
	t16.Add(&t20, &t10)
	t7.Add(&t17, &t16)
	t22.Add(&t1, &t7)
	t5.Add(&t15, &t22)
	t1.Add(&t17, &t5)
	t17.Add(&t17, &t1)
	t15.Add(&t15, &t17)
	t4.Add(&t4, &t15)
	t25.Add(&t6, &t15)
	for s := 0; s < 8; s++ {
		t25.Double(&t25)
	}
	t24.Add(&t24, &t25)
	for s := 0; s < 13; s++ {
		t24.Double(&t24)
	}
	t23.Add(&t23, &t24)
	for s := 0; s < 11; s++ {
		t23.Double(&t23)
	}
	t22.Add(&t22, &t23)
	for s := 0; s < 12; s++ {
		t22.Double(&t22)
	}
	t21.Add(&t21, &t22)
	for s := 0; s < 7; s++ {
		t21.Double(&t21)
	}
	t21.Add(&t9, &t21)
	for s := 0; s < 9; s++ {
		t21.Double(&t21)
	}
	t21.Add(&t4, &t21)
	t20.Add(&t20, &t21)
	for s := 0; s < 8; s++ {
		t20.Double(&t20)
	}
	t19.Add(&t19, &t20)
	for s := 0; s < 7; s++ {
		t19.Double(&t19)
	}
	t19.Add(&t0, &t19)
	for s := 0; s < 8; s++ {
		t19.Double(&t19)
	}
	t18.Add(&t18, &t19)
	for s := 0; s < 12; s++ {
		t18.Double(&t18)
	}
	t17.Add(&t17, &t18)
	for s := 0; s < 8; s++ {
		t17.Double(&t17)
	}
	t16.Add(&t16, &t17)
	for s := 0; s < 9; s++ {
		t16.Double(&t16)
	}
	t15.Add(&t15, &t16)
	for s := 0; s < 8; s++ {
		t15.Double(&t15)
	}
	t14.Add(&t14, &t15)
	for s := 0; s < 9; s++ {
		t14.Double(&t14)
	}
	t13.Add(&t13, &t14)
	for s := 0; s < 8; s++ {
		t13.Double(&t13)
	}
	t12.Add(&t12, &t13)
	for s := 0; s < 9; s++ {
		t12.Double(&t12)
	}
	t11.Add(&t11, &t12)
	for s := 0; s < 11; s++ {
		t11.Double(&t11)
	}
	t10.Add(&t10, &t11)
	for s := 0; s < 7; s++ {
		t10.Double(&t10)
	}
	t9.Add(&t9, &t10)
	for s := 0; s < 9; s++ {
		t9.Double(&t9)
	}
	t8.Add(&t8, &t9)
	for s := 0; s < 8; s++ {
		t8.Double(&t8)
	}
	t7.Add(&t7, &t8)
	for s := 0; s < 9; s++ {
		t7.Double(&t7)
	}
	t6.Add(&t6, &t7)
	for s := 0; s < 9; s++ {
		t6.Double(&t6)
	}
	t5.Add(&t5, &t6)
	for s := 0; s < 8; s++ {
		t5.Double(&t5)
	}
	t4.Add(&t4, &t5)
	for s := 0; s < 7; s++ {
		t4.Double(&t4)
	}
	t3.Add(&t3, &t4)
	for s := 0; s < 9; s++ {
		t3.Double(&t3)
	}
	t2.Add(&t2, &t3)
	for s := 0; s < 11; s++ {
		t2.Double(&t2)
	}
	t1.Add(&t1, &t2)
	for s := 0; s < 7; s++ {
		t1.Double(&t1)
	}
	t0.Add(&t0, &t1)
	for s := 0; s < 5; s++ {
		t0.Double(&t0)
	}
	x.Add(&z, &t0)
}
