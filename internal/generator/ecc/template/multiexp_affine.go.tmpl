{{ $G1TAffine := print (toUpper .G1.PointName) "Affine" }}
{{ $G1TJacobian := print (toUpper .G1.PointName) "Jac" }}
{{ $G1TJacobianExtended := print (toLower .G1.PointName) "JacExtended" }}

{{ $G2TAffine := print (toUpper .G2.PointName) "Affine" }}
{{ $G2TJacobian := print (toUpper .G2.PointName) "Jac" }}
{{ $G2TJacobianExtended := print (toLower .G2.PointName) "JacExtended" }}




const MAX_BATCH_SIZE = 600

type batchOp struct {
	bucketID, pointID uint32
}

func (o batchOp) isNeg() bool {
	return o.pointID&1 == 1
}



{{ template "multiexp" dict "PointName" .G1.PointName "UPointName" (toUpper .G1.PointName) "TAffine" $G1TAffine "TJacobian" $G1TJacobian "TJacobianExtended" $G1TJacobianExtended "FrNbWords" .Fr.NbWords "CRange" .G1.CRange "LastCRange" .G1.LastCRange}}
{{ template "multiexp" dict "PointName" .G2.PointName "UPointName" (toUpper .G2.PointName) "TAffine" $G2TAffine "TJacobian" $G2TJacobian "TJacobianExtended" $G2TJacobianExtended "FrNbWords" .Fr.NbWords "CRange" .G2.CRange "LastCRange" .G2.LastCRange}}



{{define "multiexp" }}


// processChunk{{ $.UPointName }}BatchAffine process a chunk of the scalars during the msm
// using affine coordinates for the buckets. To amortize the cost of the inverse in the affine addition
// we use a batch affine addition.
// 
// this is derived from a PR by 0x0ece : https://github.com/ConsenSys/gnark-crypto/pull/249
// See Section 5.3: ia.cr/2022/1396
func processChunk{{ $.UPointName }}BatchAffine[B ib{{ $.TAffine }}](chunk uint64,
	 chRes chan<- {{ $.TJacobianExtended }},
	 c uint64,
	 points []{{ $.TAffine }},
	 digits []uint32) {

	// init the buckets
	var buckets B
	for i := 0; i < len(buckets); i++ {
		buckets[i].setInfinity()
	}

	// setup for the batch affine;
	batchSize := len(buckets) / 5
	if batchSize > MAX_BATCH_SIZE {
		batchSize = MAX_BATCH_SIZE
	}
	if batchSize <= 0 {
		batchSize = 1
	}
	bucketIds := make(map[uint32]struct{}, len(buckets)/2) // TODO @gbotrel tune the capacity here
	cptP := 0 // count the number of point added to current batch

	var P [MAX_BATCH_SIZE]{{ $.TAffine }} // allocated on the stack
	var R [MAX_BATCH_SIZE]*{{ $.TAffine }} // ... 

	canAdd := func(bID uint32) bool {
		_, ok := bucketIds[bID]
		return !ok
	}

	isFull := func() bool {
		return cptP == batchSize
	}

	executeAndReset := func ()  {
		if cptP == 0 {
			return
		}
		BatchAdd{{ $.TAffine }}(R[:cptP], P[:cptP], cptP)
		for k := range bucketIds {
			delete(bucketIds, k)
		}
		cptP = 0
	}

	add := func(op batchOp) {
		// CanAdd must be called before --> ensures bucket is not "used" in current batch
	
		BK := &buckets[op.bucketID]
		PP := &points[op.pointID>>1]
		if PP.IsInfinity() {
			return
		}
		// handle special cases with inf or -P / P
		if BK.IsInfinity() {
			if op.isNeg() {
				BK.Neg(PP)
			} else {
				BK.Set(PP)
			}
			return
		}
		if op.isNeg() {
			// if bucket == P --> -P == 0
			if BK.Equal(PP) {
				BK.setInfinity()
				return
			}
		} else {
			// if bucket == -P, B == 0
			if BK.X.Equal(&PP.X) && !BK.Y.Equal(&PP.Y) {
				BK.setInfinity()
				return
			}
		}
	
		// bucketIds[cptP] = op.bucketID
		bucketIds[op.bucketID] = struct{}{}
		R[cptP] = BK
		if op.isNeg() {
			P[cptP].Neg(PP)
		} else {
			P[cptP].Set(PP)
		}
		cptP++
	}
	

	queue := make([]batchOp, 0, 4096) // TODO find right capacity here.


	processQueue := func () {
		// for i := len(queue) - 1; i >= 0; i-- {
		for i := 0; i < len(queue); i++ {
			if canAdd(queue[i].bucketID) {
				add(queue[i])
				if isFull() {
					executeAndReset()
				}
				queue[i] = queue[len(queue)-1]
				queue = queue[:len(queue)-1]
				i--
			}
		}
	}

	nbBatches := 0
	for i, digit := range digits {

		if digit == 0 {
			continue
		}

		op := batchOp{pointID: uint32(i) << 1}
		// if msbWindow bit is set, we need to substract
		if digit&1 == 0 {
			// add
			op.bucketID = uint32((digit>>1) - 1)
		} else {
			// sub
			op.bucketID = (uint32((digit>>1)))
			op.pointID += 1
		}
		if canAdd(op.bucketID) {
			add(op)
			if isFull() {
				executeAndReset()
				nbBatches++
				if len(queue) != 0 { // TODO @gbotrel this doesn't seem to help much? should minimize queue resizing 
					add(queue[len(queue)-1])
					queue = queue[:len(queue)-1]
				}
				// processQueue()
			}
		} else {
			// put it in queue.
			queue = append(queue, op)
		}
	}
	// fmt.Printf("chunk %d\nlen(queue)=%d\nnbBatches=%d\nbatchSize=%d\nnbBuckets=%d\nnbPoints=%d\n",
	// 	chunk, len(queue), nbBatches, batch.batchSize, len(buckets), len(points))
	// executeAndReset()
	for len(queue) != 0 {
		processQueue()
		executeAndReset() // execute batch even if not full.
	}

	// flush items in batch.
	executeAndReset()

	// reduce buckets into total
	// total =  bucket[0] + 2*bucket[1] + 3*bucket[2] ... + n*bucket[n-1]

	var runningSum, total {{ $.TJacobianExtended }}
	runningSum.setInfinity()
	total.setInfinity()
	for k := len(buckets) - 1; k >= 0; k-- {
		if !buckets[k].IsInfinity() {
			runningSum.addMixed(&buckets[k])
		}
		total.add(&runningSum)
	}

	chRes <- total

}

// we declare the buckets as fixed-size array types
// this allow us to allocate the buckets on the stack
{{- range $c :=  $.CRange}}
type bucket{{ $.TAffine }}C{{$c}} [1<<({{$c}}-1)]{{ $.TAffine }}
{{- end}}

type ib{{ $.TAffine }} interface {
	{{- range $i, $c :=  $.CRange}}
	bucket{{ $.TAffine }}C{{$c}} {{- if not (last $i $.CRange)}} | {{- end}}
	{{- end}}
}

{{end }}
