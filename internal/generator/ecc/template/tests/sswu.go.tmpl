{{$CoordType := .Point.CoordType}}
{{$CurveName := .Point.PointName}}
{{$CurveTitle := toTitle $CurveName}}
import (
	{{- if eq .Field.Degree 1 }}
	"github.com/consensys/gnark-crypto/ecc/{{.Name}}/fp"
	{{else}}
	"github.com/consensys/gnark-crypto/ecc/{{.Name}}/internal/fptower"
	{{- end}}
	"testing"
	"github.com/leanovate/gopter"
	"github.com/leanovate/gopter/prop"
)

func Test{{$CurveTitle}}SqrtRatio(t *testing.T) {

	parameters := gopter.DefaultTestParameters()
	properties := gopter.NewProperties(parameters)
	gen := genCoordElem{{$CurveTitle}}(t)

	properties.Property("{{$CurveTitle}}SqrtRatio must square back to the right value", prop.ForAll(
		func(u {{$CoordType}}, v {{$CoordType}}) bool {

			var seen {{$CoordType}}
			qr := {{$CurveName}}SqrtRatio(&seen, &u, &v) == 0

			seen.
				Square(&seen).
				Mul(&seen, &v)

			var ref {{$CoordType}}
			if qr {
				ref = u
			} else {
				{{$CurveName}}MulByZ(&ref, &u)
			}

			return seen.Equal(&ref)
		}, gen, gen))

	properties.TestingRun(t, gopter.ConsoleReporter(false))
}

func genCoordElem{{$CurveTitle}}(t *testing.T) gopter.Gen {
	return func(genParams *gopter.GenParameters) *gopter.GenResult {

		genRandomElem := func() {{$CoordType}} {
			var a {{$CoordType}}

			if _, err := a.SetRandom(); err != nil {
				t.Error(err)
			}

			return a
		}
		a := genRandomElem()

		genResult := gopter.NewGenResult(a, gopter.NoShrinker)
		return genResult
	}
}