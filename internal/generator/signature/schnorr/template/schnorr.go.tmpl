import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"crypto/sha512"
	"crypto/subtle"
	"errors"
	"hash"
	"io"
	"math/big"

	"github.com/consensys/gnark-crypto/ecc/{{ .Name }}"
	"github.com/consensys/gnark-crypto/ecc/{{ .Name }}/fr"
	"github.com/consensys/gnark-crypto/ecc/{{ .Name }}/fp"
	"github.com/consensys/gnark-crypto/signature"
)

var errHashNeeded = errors.New("hFunc cannot be nil. We need a hash for Fiat-Shamir.")

const (
	sizeFr         = fr.Bytes
	sizeFp         = fp.Bytes
{{- if eq .Name "secp256k1"}}
	sizePublicKey  = 2 * sizeFp
{{- else}}
	sizePublicKey  = sizeFp
{{- end}}
	sizePrivateKey = sizeFr + sizePublicKey
	sizeSignature  = 2 * sizeFr
)

var order = fr.Modulus()

// PublicKey represents an Schnorr public key
type PublicKey struct {
	A {{ .CurvePackage }}.G1Affine
}

// PrivateKey represents an Schnorr private key
type PrivateKey struct {
	PublicKey PublicKey
	scalar    [sizeFr]byte // secret scalar, in big Endian
}

// Signature represents an Schnorr signature
type Signature struct {
	R, S [sizeFr]byte
}

var one = new(big.Int).SetInt64(1)

// randFieldElement returns a random element of the order of the given
// curve using the procedure given in FIPS 186-4, Appendix B.5.1.
func randFieldElement(rand io.Reader) (k *big.Int, err error) {
	b := make([]byte, fr.Bits/8+8)
	_, err = io.ReadFull(rand, b)
	if err != nil {
		return
	}

	k = new(big.Int).SetBytes(b)
	n := new(big.Int).Sub(order, one)
	k.Mod(k, n)
	k.Add(k, one)
	return
}

// GenerateKey generates a public and private key pair.
func GenerateKey(rand io.Reader) (*PrivateKey, error) {

	k, err := randFieldElement(rand)
	if err != nil {
		return nil, err

	}

    {{- if or (eq .Name "secp256k1") (eq .Name "stark-curve")}}
        _, g := {{ .CurvePackage }}.Generators()
    {{- else}}
        _, _, g, _ := {{ .CurvePackage }}.Generators()
    {{- end}}

	privateKey := new(PrivateKey)
	k.FillBytes(privateKey.scalar[:sizeFr])
	privateKey.PublicKey.A.ScalarMultiplication(&g, k)
	return privateKey, nil
}

// HashToInt converts a hash value to an integer. Per FIPS 186-4, Section 6.4,
// we use the left-most bits of the hash to match the bit-length of the order of
// the curve. This also performs Step 5 of SEC 1, Version 2.0, Section 4.1.3.
func HashToInt(hash []byte) *big.Int {
	if len(hash) > sizeFr {
		hash = hash[:sizeFr]
    }
	ret := new(big.Int).SetBytes(hash)
	excess := len(hash)*8 - sizeFr
	if excess > 0 {
		ret.Rsh(ret, uint(excess))
	}
	return ret
}

type zr struct{}

// Read replaces the contents of dst with zeros. It is safe for concurrent use.
func (zr) Read(dst []byte) (n int, err error) {
	for i := range dst {
		dst[i] = 0
	}
	return len(dst), nil
}

var zeroReader = zr{}

const (
	aesIV = "gnark-crypto IV." // must be 16 chars (equal block size)
)

func nonce(privateKey *PrivateKey, hash []byte) (csprng *cipher.StreamReader, err error) {
	// This implementation derives the nonce from an AES-CTR CSPRNG keyed by:
	//
	//    SHA2-512(privateKey.scalar ‚à• entropy ‚à• hash)[:32]
	//
	// The CSPRNG key is indifferentiable from a random oracle as shown in
	// [Coron], the AES-CTR stream is indifferentiable from a random oracle
	// under standard cryptographic assumptions (see [Larsson] for examples).
	//
	// [Coron]: https://cs.nyu.edu/~dodis/ps/merkle.pdf
	// [Larsson]: https://web.archive.org/web/20040719170906/https://www.nada.kth.se/kurser/kth/2D1441/semteo03/lecturenotes/assump.pdf

	// Get 256 bits of entropy from rand.
	entropy := make([]byte, 32)
	_, err = io.ReadFull(rand.Reader, entropy)
	if err != nil {
		return

	}

	// Initialize an SHA-512 hash context; digest...
	md := sha512.New()
	md.Write(privateKey.scalar[:sizeFr]) // the private key,
	md.Write(entropy)                   // the entropy,
	md.Write(hash)                      // and the input hash;
	key := md.Sum(nil)[:32]             // and compute ChopMD-256(SHA-512),
	// which is an indifferentiable MAC.

	// Create an AES-CTR instance to use as a CSPRNG.
	block, _ := aes.NewCipher(key)

	// Create a CSPRNG that xors a stream of zeros with
	// the output of the AES-CTR instance.
	csprng = &cipher.StreamReader{
		R: zeroReader,
		S: cipher.NewCTR(block, []byte(aesIV)),
	}

	return csprng, err
}

// Equal compares 2 public keys
func (pub *PublicKey) Equal(x signature.PublicKey) bool {
	xx, ok := x.(*PublicKey)
	if !ok {
		return false
	}
	bpk := pub.Bytes()
	bxx := xx.Bytes()
	return subtle.ConstantTimeCompare(bpk, bxx) == 1
}

// Public returns the public key associated to the private key.
func (privKey *PrivateKey) Public() signature.PublicKey {
	var pub PublicKey
	pub.A.Set(&privKey.PublicKey.A)
	return &pub
}

// Sign performs the Schnorr signature
//
// k ‚Üê ùîΩr (random)
// P = k ‚ãÖ g1Gen
// r = H ( P || m )
// s = k - x ‚ãÖ r
// signature = {r, s}
func (privKey *PrivateKey) Sign(message []byte, hFunc hash.Hash) ([]byte, error) {

	// hFunc cannot be nil.
	// We need a hash function for the Fiat-Shamir.
	if hFunc == nil {
		return nil, errHashNeeded
	}

	scalar, r, s := new(big.Int), new(big.Int), new(big.Int)
	scalar.SetBytes(privKey.scalar[:sizeFr])
			csprng, err := nonce(privKey, message)
			if err != nil {
				return nil, err
			}
			k, err := randFieldElement(csprng)
			if err != nil {
				return nil, err
			}

			var P {{ .CurvePackage }}.G1Affine
			P.ScalarMultiplicationBase(k)

    // compute H(R, M), all parameters in data are in Montgomery form
    PX := P.X.Bytes()
    PY := P.Y.Bytes()
    sizeDataToHash := 2*sizeFp + len(message)
    dataToHash := make([]byte, sizeDataToHash)
    copy(dataToHash[:], PX[:])
    copy(dataToHash[sizeFp:], PY[:])
    copy(dataToHash[2*sizeFp:], message)
    hFunc.Reset()
    _, err = hFunc.Write(dataToHash[:])
    if err != nil {
     return nil, err
    }

    hramBin := hFunc.Sum(nil)
    r = HashToInt(hramBin)

	s.Mul(scalar, r)
	s.Sub(k, s).
		Mod(s, order)

	var sig Signature
	r.FillBytes(sig.R[:sizeFr])
	s.FillBytes(sig.S[:sizeFr])

	return sig.Bytes(), nil
}

// Verify validates the Schnorr signature
//
// R = s ‚ãÖ Base + r ‚ãÖ publiKey
// H ( R || m ) ?= r
func (publicKey *PublicKey) Verify(sigBin, message []byte, hFunc hash.Hash) (bool, error) {

	// hFunc cannot be nil.
	// We need a hash function for the Fiat-Shamir.
	if hFunc == nil {
		return false, errHashNeeded
	}

	// Deserialize the signature
	var sig Signature
	if _, err := sig.SetBytes(sigBin); err != nil {
		return false, err
 	}

	r, s, e := new(big.Int), new(big.Int), new(big.Int)
	r.SetBytes(sig.R[:sizeFr])
	s.SetBytes(sig.S[:sizeFr])

	var P {{ .CurvePackage }}.G1Jac
	P.JointScalarMultiplicationBase(&publicKey.A, s, r)
	var _P {{ .CurvePackage }}.G1Affine
	_P.FromJacobian(&P)

    // compute H(R, M), all parameters in data are in Montgomery form
    PX := _P.X.Bytes()
    PY := _P.Y.Bytes()
    sizeDataToHash := 2*sizeFp + len(message)
    dataToHash := make([]byte, sizeDataToHash)
    copy(dataToHash[:], PX[:])
    copy(dataToHash[sizeFp:], PY[:])
    copy(dataToHash[2*sizeFp:], message)
    hFunc.Reset()
    _, err := hFunc.Write(dataToHash[:])
    if err != nil {
        return false, err
    }

    hramBin := hFunc.Sum(nil)
    e = HashToInt(hramBin)

	return e.Cmp(r) == 0, nil

}
