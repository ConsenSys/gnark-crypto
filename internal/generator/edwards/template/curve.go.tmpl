
import (
	"math/big"
	"sync"

	"github.com/consensys/gnark-crypto/ecc/{{.Name}}/fr"

	{{- if .HasEndomorphism}}
		"github.com/consensys/gnark-crypto/ecc"
	{{- end}}
)

// CurveParams curve parameters: ax^2 + y^2 = 1 + d*x^2*y^2
type CurveParams struct {
	A, D     fr.Element
	Cofactor fr.Element
	Order    big.Int
	Base     PointAffine

	{{- if .HasEndomorphism}}
	// endomorphism
	endo     [2]fr.Element
	lambda   big.Int
	glvBasis ecc.Lattice
	{{- end}}
}

// GetEdwardsCurve returns the twisted Edwards curve on {{.Name}}/Fr
func GetEdwardsCurve() CurveParams {
	initOnce.Do(initCurveParams)
	// copy to keep Order private
	var res CurveParams

	res.A.Set(&curveParams.A)
	res.D.Set(&curveParams.D)
	res.Cofactor.Set(&curveParams.Cofactor)
	res.Order.Set(&curveParams.Order)
	res.Base.Set(&curveParams.Base)

	{{- if .HasEndomorphism}}
	res.endo[0].Set(&curveParams.endo[0])
	res.endo[1].Set(&curveParams.endo[1])
	res.lambda.Set(&curveParams.lambda)
	res.glvBasis = curveParams.glvBasis // TODO @gbotrel do proper copy of that
	{{- end}}

	return res
}


var (
	initOnce sync.Once
	curveParams CurveParams
)


func initCurveParams() {
	curveParams.A.SetString("{{.A}}")
	curveParams.D.SetString("{{.D}}")
	curveParams.Cofactor.SetString("{{.Cofactor}}")
	curveParams.Order.SetString("{{.Order}}", 10)

	curveParams.Base.X.SetString("{{.BaseX}}")
	curveParams.Base.Y.SetString("{{.BaseY}}")

	{{- if .HasEndomorphism}}
	curveParams.endo[0].SetString("{{.Endo0}}")
	curveParams.endo[1].SetString("{{.Endo1}}")
	curveParams.lambda.SetString("{{.Lambda}}", 10)
	ecc.PrecomputeLattice(&curveParams.Order, &curveParams.lambda, &curveParams.glvBasis)
	{{- end}}
}

// mulByA multiplies fr.Element by curveParams.A
func mulByA(x *fr.Element) {
	{{- if eq .A "-1"}}
		x.Neg(x)
	{{- else if eq .A "-5"}}
		x.Neg(x)
		fr.MulBy5(x)
	{{- else }}
        x.Mul(x, &curveParams.A)
	{{- end}}
}


// mulByD multiplies fr.Element by curveParams.D
func mulByD(x *fr.Element) {
{{- if eq .Name "bn254"}}
	// Generated by github.com/mmcloughlin/addchain v0.4.0.
	// Operations: 248 doublings 58 additions

	var z, t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15 fr.Element

	t1.Double(x)
	t14.Add(x, &t1)
	t8.Add(&t1, &t14)
	z.Add(&t1, &t8)
	t13.Add(&t1, &z)
	t12.Add(&t1, &t13)
	t2.Add(&t1, &t12)
	t6.Add(&t1, &t2)
	t11.Add(&t1, &t6)
	t7.Add(&t1, &t11)
	t5.Add(&t1, &t7)
	t0.Add(&t1, &t5)
	t4.Add(&t1, &t0)
	t9.Add(&t1, &t4)
	t3.Add(&t1, &t9)
	t10.Add(&t0, &t3)
	t1.Add(&t12, &t10)
	t15.Double(&t10)
	t10.Add(&t0, &t15)
	for s := 0; s < 3; s++ {
		t15.Double(&t15)
	}
	t15.Add(&t3, &t15)
	for s := 0; s < 4; s++ {
		t15.Double(&t15)
	}
	t15.Add(&t2, &t15)
	for s := 0; s < 3; s++ {
		t15.Double(&t15)
	}
	t15.Add(x, &t15)
	for s := 0; s < 8; s++ {
		t15.Double(&t15)
	}
	t15.Add(&t6, &t15)
	for s := 0; s < 8; s++ {
		t15.Double(&t15)
	}
	t15.Add(&t5, &t15)
	for s := 0; s < 4; s++ {
		t15.Double(&t15)
	}
	t15.Add(&t6, &t15)
	for s := 0; s < 3; s++ {
		t15.Double(&t15)
	}
	t15.Add(x, &t15)
	for s := 0; s < 6; s++ {
		t15.Double(&t15)
	}
	t14.Add(&t14, &t15)
	for s := 0; s < 7; s++ {
		t14.Double(&t14)
	}
	t13.Add(&t13, &t14)
	for s := 0; s < 5; s++ {
		t13.Double(&t13)
	}
	t13.Add(&t2, &t13)
	for s := 0; s < 7; s++ {
		t13.Double(&t13)
	}
	t13.Add(&t7, &t13)
	for s := 0; s < 5; s++ {
		t13.Double(&t13)
	}
	t13.Add(&t9, &t13)
	for s := 0; s < 3; s++ {
		t13.Double(&t13)
	}
	t13.Add(&z, &t13)
	for s := 0; s < 8; s++ {
		t13.Double(&t13)
	}
	t13.Add(&z, &t13)
	for s := 0; s < 6; s++ {
		t13.Double(&t13)
	}
	t12.Add(&t12, &t13)
	for s := 0; s < 6; s++ {
		t12.Double(&t12)
	}
	t12.Add(&t0, &t12)
	for s := 0; s < 5; s++ {
		t12.Double(&t12)
	}
	t12.Add(&t7, &t12)
	for s := 0; s < 9; s++ {
		t12.Double(&t12)
	}
	t12.Add(&t10, &t12)
	for s := 0; s < 6; s++ {
		t12.Double(&t12)
	}
	t11.Add(&t11, &t12)
	for s := 0; s < 10; s++ {
		t11.Double(&t11)
	}
	t10.Add(&t10, &t11)
	for s := 0; s < 11; s++ {
		t10.Double(&t10)
	}
	t10.Add(&z, &t10)
	for s := 0; s < 7; s++ {
		t10.Double(&t10)
	}
	t9.Add(&t9, &t10)
	for s := 0; s < 5; s++ {
		t9.Double(&t9)
	}
	t8.Add(&t8, &t9)
	for s := 0; s < 7; s++ {
		t8.Double(&t8)
	}
	t8.Add(&t5, &t8)
	for s := 0; s < 5; s++ {
		t8.Double(&t8)
	}
	t7.Add(&t7, &t8)
	for s := 0; s < 4; s++ {
		t7.Double(&t7)
	}
	t7.Add(&t2, &t7)
	for s := 0; s < 6; s++ {
		t7.Double(&t7)
	}
	t7.Add(&t3, &t7)
	for s := 0; s < 5; s++ {
		t7.Double(&t7)
	}
	t7.Add(&t0, &t7)
	for s := 0; s < 5; s++ {
		t7.Double(&t7)
	}
	t7.Add(&t4, &t7)
	for s := 0; s < 9; s++ {
		t7.Double(&t7)
	}
	t7.Add(&t4, &t7)
	for s := 0; s < 4; s++ {
		t7.Double(&t7)
	}
	t6.Add(&t6, &t7)
	for s := 0; s < 2; s++ {
		t6.Double(&t6)
	}
	t6.Add(x, &t6)
	for s := 0; s < 10; s++ {
		t6.Double(&t6)
	}
	t6.Add(&t3, &t6)
	for s := 0; s < 4; s++ {
		t6.Double(&t6)
	}
	t6.Add(&z, &t6)
	for s := 0; s < 7; s++ {
		t6.Double(&t6)
	}
	t5.Add(&t5, &t6)
	for s := 0; s < 8; s++ {
		t5.Double(&t5)
	}
	t4.Add(&t4, &t5)
	for s := 0; s < 5; s++ {
		t4.Double(&t4)
	}
	t3.Add(&t3, &t4)
	for s := 0; s < 6; s++ {
		t3.Double(&t3)
	}
	t2.Add(&t2, &t3)
	for s := 0; s < 7; s++ {
		t2.Double(&t2)
	}
	t1.Add(&t1, &t2)
	for s := 0; s < 6; s++ {
		t1.Double(&t1)
	}
	t0.Add(&t0, &t1)
	for s := 0; s < 6; s++ {
		t0.Double(&t0)
	}
	z.Add(&z, &t0)
	x.Double(&z)

{{- else if and (eq .Name "bls12-381") (eq .Package "twistededwards")}}
	// Generated by github.com/mmcloughlin/addchain v0.4.0.
	// Operations: 248 doublings 61 multiplications

	var z, t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25 fr.Element

	t13.Double(x)
	t3.Double(&t13)
	t0.Add(&t13, &t3)
	t18.Add(&t13, &t0)
	t17.Add(&t3, &t18)
	t1.Add(x, &t17)
	t24.Add(&t0, &t1)
	t4.Add(x, &t24)
	z.Add(x, &t4)
	t22.Double(&z)
	t2.Add(x, &t22)
	z.Add(&t0, &t2)
	t15.Add(&t4, &t2)
	t20.Add(&t0, &t15)
	t16.Add(&t3, &t20)
	t11.Add(&t13, &t16)
	t10.Add(&t22, &z)
	t7.Add(&t17, &t10)
	t19.Add(&t13, &t7)
	t0.Add(&t4, &t19)
	t21.Add(&t13, &t0)
	t5.Add(&t3, &t21)
	t12.Add(&t13, &t5)
	t6.Add(&t4, &t21)
	t9.Add(&t18, &t6)
	t3.Add(&t2, &t21)
	t8.Add(x, &t3)
	t3.Add(&t13, &t8)
	t13.Add(&t13, &t3)
	t4.Add(&t4, &t8)
	t23.Add(&t18, &t4)
	t14.Add(&t22, &t3)
	t22.Add(&t22, &t4)
	t17.Add(&t17, &t22)
	t25.Add(&t0, &t14)
	for s := 0; s < 5; s++ {
		t25.Double(&t25)
	}
	t24.Add(&t24, &t25)
	for s := 0; s < 11; s++ {
		t24.Double(&t24)
	}
	t23.Add(&t23, &t24)
	for s := 0; s < 10; s++ {
		t23.Double(&t23)
	}
	t22.Add(&t22, &t23)
	for s := 0; s < 8; s++ {
		t22.Double(&t22)
	}
	t21.Add(&t21, &t22)
	for s := 0; s < 8; s++ {
		t21.Double(&t21)
	}
	t20.Add(&t20, &t21)
	for s := 0; s < 8; s++ {
		t20.Double(&t20)
	}
	t19.Add(&t19, &t20)
	for s := 0; s < 11; s++ {
		t19.Double(&t19)
	}
	t19.Add(&t17, &t19)
	for s := 0; s < 8; s++ {
		t19.Double(&t19)
	}
	t18.Add(&t18, &t19)
	t17.Add(&t17, &t18)
	for s := 0; s < 7; s++ {
		t17.Double(&t17)
	}
	t16.Add(&t16, &t17)
	for s := 0; s < 12; s++ {
		t16.Double(&t16)
	}
	t15.Add(&t15, &t16)
	for s := 0; s < 10; s++ {
		t15.Double(&t15)
	}
	t14.Add(&t14, &t15)
	for s := 0; s < 8; s++ {
		t14.Double(&t14)
	}
	t13.Add(&t13, &t14)
	for s := 0; s < 7; s++ {
		t13.Double(&t13)
	}
	t13.Add(&t0, &t13)
	for s := 0; s < 9; s++ {
		t13.Double(&t13)
	}
	t12.Add(&t12, &t13)
	for s := 0; s < 9; s++ {
		t12.Double(&t12)
	}
	t11.Add(&t11, &t12)
	for s := 0; s < 9; s++ {
		t11.Double(&t11)
	}
	t11.Add(&t4, &t11)
	for s := 0; s < 7; s++ {
		t11.Double(&t11)
	}
	t10.Add(&t10, &t11)
	for s := 0; s < 9; s++ {
		t10.Double(&t10)
	}
	t9.Add(&t9, &t10)
	for s := 0; s < 8; s++ {
		t9.Double(&t9)
	}
	t8.Add(&t8, &t9)
	for s := 0; s < 7; s++ {
		t8.Double(&t8)
	}
	t7.Add(&t7, &t8)
	for s := 0; s < 9; s++ {
		t7.Double(&t7)
	}
	t6.Add(&t6, &t7)
	for s := 0; s < 16; s++ {
		t6.Double(&t6)
	}
	t5.Add(&t5, &t6)
	for s := 0; s < 10; s++ {
		t5.Double(&t5)
	}
	t4.Add(&t4, &t5)
	for s := 0; s < 8; s++ {
		t4.Double(&t4)
	}
	t3.Add(&t3, &t4)
	for s := 0; s < 6; s++ {
		t3.Double(&t3)
	}
	t2.Add(&t2, &t3)
	for s := 0; s < 7; s++ {
		t2.Double(&t2)
	}
	t1.Add(&t1, &t2)
	for s := 0; s < 11; s++ {
		t1.Double(&t1)
	}
	t0.Add(&t0, &t1)
	for s := 0; s < 7; s++ {
		t0.Double(&t0)
	}
	x.Add(&z, &t0)
{{- else if and (eq .Name "bls12-381") (eq .Package "bandersnatch")}}
	// Generated by github.com/mmcloughlin/addchain v0.4.0.
	// Operations: 248 doublings 62 additions

	var z, t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25 fr.Element

	t17.Double(x)
	t15.Double(&t17)
	t1.Add(&t17, &t15)
	z.Add(x, &t1)
	t5.Add(x, &z)
	t4.Add(&t17, &t5)
	t20.Add(&t17, &t4)
	t3.Add(&t1, &t20)
	t0.Add(x, &t3)
	t6.Add(x, &t0)
	t24.Add(&t0, &t6)
	t2.Add(&t4, &t24)
	t12.Add(&t17, &t2)
	t0.Add(&t6, &t12)
	t13.Add(&t6, &t0)
	t14.Add(&t5, &t13)
	t3.Add(&t3, &t14)
	t11.Add(&t17, &t3)
	t9.Add(&t17, &t11)
	t18.Add(&t1, &t9)
	t23.Add(&t6, &t18)
	t21.Add(&t1, &t23)
	t19.Add(&t17, &t21)
	t8.Add(&t20, &t19)
	t6.Add(&t20, &t8)
	t10.Add(&t5, &t6)
	t16.Add(&t20, &t10)
	t7.Add(&t17, &t16)
	t22.Add(&t1, &t7)
	t5.Add(&t15, &t22)
	t1.Add(&t17, &t5)
	t17.Add(&t17, &t1)
	t15.Add(&t15, &t17)
	t4.Add(&t4, &t15)
	t25.Add(&t6, &t15)
	for s := 0; s < 8; s++ {
		t25.Double(&t25)
	}
	t24.Add(&t24, &t25)
	for s := 0; s < 13; s++ {
		t24.Double(&t24)
	}
	t23.Add(&t23, &t24)
	for s := 0; s < 11; s++ {
		t23.Double(&t23)
	}
	t22.Add(&t22, &t23)
	for s := 0; s < 12; s++ {
		t22.Double(&t22)
	}
	t21.Add(&t21, &t22)
	for s := 0; s < 7; s++ {
		t21.Double(&t21)
	}
	t21.Add(&t9, &t21)
	for s := 0; s < 9; s++ {
		t21.Double(&t21)
	}
	t21.Add(&t4, &t21)
	t20.Add(&t20, &t21)
	for s := 0; s < 8; s++ {
		t20.Double(&t20)
	}
	t19.Add(&t19, &t20)
	for s := 0; s < 7; s++ {
		t19.Double(&t19)
	}
	t19.Add(&t0, &t19)
	for s := 0; s < 8; s++ {
		t19.Double(&t19)
	}
	t18.Add(&t18, &t19)
	for s := 0; s < 12; s++ {
		t18.Double(&t18)
	}
	t17.Add(&t17, &t18)
	for s := 0; s < 8; s++ {
		t17.Double(&t17)
	}
	t16.Add(&t16, &t17)
	for s := 0; s < 9; s++ {
		t16.Double(&t16)
	}
	t15.Add(&t15, &t16)
	for s := 0; s < 8; s++ {
		t15.Double(&t15)
	}
	t14.Add(&t14, &t15)
	for s := 0; s < 9; s++ {
		t14.Double(&t14)
	}
	t13.Add(&t13, &t14)
	for s := 0; s < 8; s++ {
		t13.Double(&t13)
	}
	t12.Add(&t12, &t13)
	for s := 0; s < 9; s++ {
		t12.Double(&t12)
	}
	t11.Add(&t11, &t12)
	for s := 0; s < 11; s++ {
		t11.Double(&t11)
	}
	t10.Add(&t10, &t11)
	for s := 0; s < 7; s++ {
		t10.Double(&t10)
	}
	t9.Add(&t9, &t10)
	for s := 0; s < 9; s++ {
		t9.Double(&t9)
	}
	t8.Add(&t8, &t9)
	for s := 0; s < 8; s++ {
		t8.Double(&t8)
	}
	t7.Add(&t7, &t8)
	for s := 0; s < 9; s++ {
		t7.Double(&t7)
	}
	t6.Add(&t6, &t7)
	for s := 0; s < 9; s++ {
		t6.Double(&t6)
	}
	t5.Add(&t5, &t6)
	for s := 0; s < 8; s++ {
		t5.Double(&t5)
	}
	t4.Add(&t4, &t5)
	for s := 0; s < 7; s++ {
		t4.Double(&t4)
	}
	t3.Add(&t3, &t4)
	for s := 0; s < 9; s++ {
		t3.Double(&t3)
	}
	t2.Add(&t2, &t3)
	for s := 0; s < 11; s++ {
		t2.Double(&t2)
	}
	t1.Add(&t1, &t2)
	for s := 0; s < 7; s++ {
		t1.Double(&t1)
	}
	t0.Add(&t0, &t1)
	for s := 0; s < 5; s++ {
		t0.Double(&t0)
	}
	x.Add(&z, &t0)


{{- else}}
    x.Mul(x, &curveParams.D)
{{- end}}
}
