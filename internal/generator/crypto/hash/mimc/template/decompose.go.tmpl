
import (	"math/big"

	"github.com/consensys/gnark-crypto/ecc/{{ .Name }}/fr"
)

// Decompose interpret rawBytes as a bigInt x in big endian,
// and returns the digits of x (from LSB to MSB) when x is written
// in basis modulo.
func Decompose(rawBytes []byte) []fr.Element {

	rawBigInt := big.NewInt(0).SetBytes(rawBytes)
	modulo := fr.Modulus()

	// maximum number of chunks that a function
	maxNbChunks := len(rawBytes) / fr.Bytes

	res := make([]fr.Element, 0, maxNbChunks)
	var tmp fr.Element
	t := new(big.Int)
	for rawBigInt.Sign() != 0 {
		rawBigInt.DivMod(rawBigInt, modulo, t)
		tmp.SetBigInt(t)
		res = append(res, tmp)
	}

	return res
}
