import (
	"math/big"
	"testing"

	"github.com/consensys/gnark-crypto/ecc/{{ .Name }}/fr"
)

func TestDecompose(t *testing.T) {

	// create 10 random digits in basis r
	nbDigits := 10
	a := make([]fr.Element, nbDigits)
	for i := 0; i < nbDigits; i++ {
		a[i].SetRandom()
	}

	// create a big int whose digits in basis r are a
	m := fr.Modulus()
	var b, tmp big.Int
	for i := nbDigits - 1; i >= 0; i-- {
		b.Mul(&b, m)
		a[i].ToBigIntRegular(&tmp)
		b.Add(&b, &tmp)
	}

	// query the decomposition and compare to a
	bb := b.Bytes()
	d := Decompose(bb)
	for i := 0; i < nbDigits; i++ {
		if !d[i].Equal(&a[i]) {
			t.Fatal("error decomposition")
		}
	}

}
